{"version":3,"sources":["components/HouseItem/index.js","components/HouseItem/index.module.css","components/NoHouse/index.js","components/NoHouse/index.module.css","pages/HouseList/components/FilterTitle/index.module.css","components/FilterFooter/index.module.css","pages/HouseList/components/FilterMore/index.module.css","pages/HouseList/components/Filter/index.module.css","components/Sticky/index.module.css","pages/HouseList/index.module.css","pages/HouseList/components/FilterTitle/index.js","components/FilterFooter/index.js","pages/HouseList/components/FilterPicker/index.js","pages/HouseList/components/FilterMore/index.js","pages/HouseList/components/Filter/index.js","components/Sticky/index.js","pages/HouseList/index.js"],"names":["HouseItem","src","title","desc","tags","price","onClick","style","className","styles","house","imgWrap","img","alt","content","map","tag","index","tagClass","join","key","priceNum","module","exports","NoHouse","children","root","BASE_URL","msg","titleList","type","FilterTitle","titleSelectedStatus","align","item","isSelected","Item","dropdown","selected","FilterFooter","cancelText","okText","onCancel","onOk","btn","cancel","ok","FilterPicker","state","value","props","defaultValue","this","onSave","data","cols","onChange","val","setState","Component","FilterMore","selectedValues","newSelectedValues","indexOf","push","findIndex","splice","tagActive","onTagClick","label","roomType","oriented","floor","characteristic","mask","dl","dt","dd","renderFilters","footer","area","mode","more","Filter","openType","filtersData","onTitleClick","htmlBody","newTitleSelectedStatus","Object","keys","forEach","selectedVal","length","console","log","filters","areaKey","areaValue","onFilter","document","body","getFiltersData","JSON","parse","localStorage","getItem","API","get","res","subway","rentType","isHide","from","opacity","to","renderMask","renderFilterPicker","renderFilterMore","Sticky","placeholder","createRef","handleScroll","height","placeholderEl","current","contentEl","getBoundingClientRect","top","classList","add","fixed","remove","window","addEventListener","removeEventListener","ref","HouseList","list","count","isLoading","scrollTo","searchHouseList","renderHouseList","history","houseCode","houseImg","loading","isRowLoaded","loadMoreRows","startIndex","stopIndex","Promise","resolve","params","cityId","start","end","then","getCurrentCity","hide","info","rowCount","onRowsRendered","registerChild","isScrolling","scrollTop","width","autoHeight","rowHeight","rowRenderer","header","go","SearchHeader","cityName","searchHeader","houseItems","renderList","React"],"mappings":"mHAAA,sCA8CeA,IAxCf,YAAuE,IAAlDC,EAAiD,EAAjDA,IAAKC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MAC3D,OACE,yBAAKC,UAAWC,IAAOC,MAAOJ,QAASA,EAASC,MAAOA,GACrD,yBAAKC,UAAWC,IAAOE,SACrB,yBAAKH,UAAWC,IAAOG,IAAKX,IAAKA,EAAKY,IAAI,MAE5C,yBAAKL,UAAWC,IAAOK,SACrB,wBAAIN,UAAWC,IAAOP,OAAQA,GAC9B,yBAAKM,UAAWC,IAAON,MAAOA,GAC9B,6BAEGC,EAAKW,KAAI,SAACC,EAAKC,GACd,IAAMC,EAAW,OAASD,EAAQ,GAClC,OACE,0BACET,UAAW,CAACC,IAAOO,IAAKP,IAAOS,IAAWC,KAAK,KAC/CC,IAAKJ,GAEJA,OAKT,yBAAKR,UAAWC,IAAOJ,OACrB,0BAAMG,UAAWC,IAAOY,UAAWhB,GADrC,sB,oBC5BRiB,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,QAAU,2BAA2B,IAAM,uBAAuB,QAAU,2BAA2B,MAAQ,yBAAyB,KAAO,wBAAwB,MAAQ,yBAAyB,SAAW,4BAA4B,IAAM,uBAAuB,KAAO,wBAAwB,KAAO,wBAAwB,KAAO,0B,iCCDpY,8CAsBeC,IAfC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAAKjB,UAAWC,IAAOiB,MACrB,yBACElB,UAAWC,IAAOG,IAClBX,IAAK0B,IAAW,qBAChBd,IAAI,6BAEN,uBAAGL,UAAWC,IAAOmB,KAAMH,M,oBCb/BH,EAAOC,QAAU,CAAC,KAAO,sBAAsB,IAAM,qBAAqB,IAAM,uB,oBCAhFD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,SAAW,8BAA8B,SAAW,gC,oBCAvGD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,IAAM,0BAA0B,OAAS,6BAA6B,GAAK,2B,oBCA/HD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,yBAAyB,KAAO,yBAAyB,IAAM,wBAAwB,UAAY,8BAA8B,GAAK,uBAAuB,GAAK,uBAAuB,GAAK,uBAAuB,OAAS,6B,oBCAvRD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,KAAO,qBAAqB,QAAU,0B,oBCApFD,EAAOC,QAAU,CAAC,MAAQ,wB,oBCA1BD,EAAOC,QAAU,CAAC,OAAS,0BAA0B,aAAe,gCAAgC,WAAa,8BAA8B,QAAU,6B,6SCMnJM,EAAY,CAChB,CAAE3B,MAAO,eAAM4B,KAAM,QACrB,CAAE5B,MAAO,eAAM4B,KAAM,QACrB,CAAE5B,MAAO,eAAM4B,KAAM,SACrB,CAAE5B,MAAO,eAAM4B,KAAM,SAaR,SAASC,EAAT,GAAwD,IAAjCC,EAAgC,EAAhCA,oBAAqB1B,EAAW,EAAXA,QACzD,OACE,uBAAM2B,MAAM,SAASzB,UAAWC,IAAOiB,MACpCG,EAAUd,KAAI,SAAAmB,GAEb,IAAMC,EAAaH,EAAoBE,EAAKJ,MAC5C,OACE,sBAAMM,KAAN,CAAWhB,IAAKc,EAAKJ,KAAMxB,QAAS,kBAAMA,EAAQ4B,EAAKJ,QAErD,0BACEtB,UAAW,CACTC,IAAO4B,SACPF,EAAa1B,IAAO6B,SAAW,IAC/BnB,KAAK,MAEP,8BAAOe,EAAKhC,OACZ,uBAAGM,UAAU,8B,+CCCZ+B,MAlCf,YAMI,IAAD,IALDC,kBAKC,MALY,eAKZ,MAJDC,cAIC,MAJQ,eAIR,EAHDC,EAGC,EAHDA,SACAC,EAEC,EAFDA,KACAnC,EACC,EADDA,UAEA,OACE,uBAAMA,UAAW,CAACC,IAAOiB,KAAMlB,GAAa,IAAIW,KAAK,MAEnD,0BACEX,UAAW,CAACC,IAAOmC,IAAKnC,IAAOoC,QAAQ1B,KAAK,KAC5Cb,QAASoC,GAERF,GAIH,0BAAMhC,UAAW,CAACC,IAAOmC,IAAKnC,IAAOqC,IAAI3B,KAAK,KAAMb,QAASqC,GAC1DF,KCuEYM,E,4MACnBC,MAAQ,CACNC,MAAO,EAAKC,MAAMC,c,uDASV,IAAD,SACwCC,KAAKF,MAA5CR,EADD,EACCA,SAAUW,EADX,EACWA,OAAQC,EADnB,EACmBA,KAAMC,EADzB,EACyBA,KAAMzB,EAD/B,EAC+BA,KAC9BmB,EAAUG,KAAKJ,MAAfC,MACR,OACE,oCAKE,uBACEK,KAAMA,EACNL,MAAOA,EACPM,KAAMA,EACNC,SAAU,SAAAC,GACR,EAAKC,SAAS,CACZT,MAAOQ,OAKb,kBAAC,EAAD,CACEf,SAAU,kBAAMA,KAChBC,KAAM,kBAAMU,EAAOvB,EAAMmB,W,GAjCOU,a,kBC3FrBC,E,4MACnBZ,MAAQ,CACNa,eAAgB,EAAKX,MAAMC,c,EAyC7BT,SAAW,WACT,EAAKgB,SAAS,CACZG,eAAgB,M,EAKnBlB,KAAO,WAAO,IAAD,EACa,EAAKO,MAAtBpB,EADI,EACJA,MAERuB,EAHY,EACEA,QAEPvB,EAAM,EAAKkB,MAAMa,iB,yDAhDfZ,GAAQ,IACTY,EAAmBT,KAAKJ,MAAxBa,eAEFC,EAAiB,YAAOD,GAE9B,GAAIC,EAAkBC,QAAQd,KAAW,EAEvCa,EAAkBE,KAAKf,OAClB,CAEL,IAAMhC,EAAQ6C,EAAkBG,WAAU,SAAA/B,GAAI,OAAIA,IAASe,KAC3Da,EAAkBI,OAAOjD,EAAO,GAGlCmC,KAAKM,SAAS,CACZG,eAAgBC,M,oCAINR,GAAO,IAAD,OACVO,EAAmBT,KAAKJ,MAAxBa,eAER,OAAOP,EAAKvC,KAAI,SAAAmB,GACd,IAAMC,EAAa0B,EAAeE,QAAQ7B,EAAKe,QAAU,EAEzD,OACE,0BACE7B,IAAKc,EAAKe,MACVzC,UAAW,CAACC,IAAOO,IAAKmB,EAAa1B,IAAO0D,UAAY,IAAIhD,KAAK,KACjEb,QAAS,kBAAM,EAAK8D,WAAWlC,EAAKe,SAEnCf,EAAKmC,Y,+BAoBJ,IAAD,EAKHjB,KAAKF,MALF,IAELI,KAAQgB,EAFH,EAEGA,SAAUC,EAFb,EAEaA,SAAUC,EAFvB,EAEuBA,MAAOC,EAF9B,EAE8BA,eACnC/B,EAHK,EAGLA,SACAZ,EAJK,EAILA,KAEF,OACE,yBAAKtB,UAAWC,IAAOiB,MAErB,yBAAKlB,UAAWC,IAAOiE,KAAMpE,QAAS,kBAAMoC,EAASZ,MAKrD,yBAAKtB,UAAWC,IAAOL,MACrB,wBAAII,UAAWC,IAAOkE,IACpB,wBAAInE,UAAWC,IAAOmE,IAAtB,gBACA,wBAAIpE,UAAWC,IAAOoE,IAAKzB,KAAK0B,cAAcR,IAE9C,wBAAI9D,UAAWC,IAAOmE,IAAtB,gBACA,wBAAIpE,UAAWC,IAAOoE,IAAKzB,KAAK0B,cAAcP,IAE9C,wBAAI/D,UAAWC,IAAOmE,IAAtB,gBACA,wBAAIpE,UAAWC,IAAOoE,IAAKzB,KAAK0B,cAAcN,IAE9C,wBAAIhE,UAAWC,IAAOmE,IAAtB,4BACA,wBAAIpE,UAAWC,IAAOoE,IAAKzB,KAAK0B,cAAcL,MAclD,kBAAC,EAAD,CACEjE,UAAWC,IAAOsE,OAClBvC,WAAW,eACXE,SAAUU,KAAKV,SACfC,KAAMS,KAAKT,Y,GApGmBgB,a,kBCUlC3B,EAAsB,CAC1BgD,MAAM,EACNC,MAAM,EACN5E,OAAO,EACP6E,MAAM,GAgBFrB,EAAiB,CACrBmB,KAAM,CAAC,OAAQ,QACfC,KAAM,CAAC,QACP5E,MAAO,CAAC,QACR6E,KAAM,IAYaC,E,4MACnBnC,MAAQ,CACNhB,sBAEAoD,SAAU,GAEVC,YAAa,GAEbxB,kB,EAqDFyB,aAAe,SAAAxD,GAEb,EAAKyD,SAAS/E,UAAY,aAFL,MAI2B,EAAKwC,MAA7ChB,EAJa,EAIbA,oBAAqB6B,EAJR,EAIQA,eAGvB2B,EAAsB,eAAQxD,GAGpCyD,OAAOC,KAAK1D,GAAqB2D,SAAQ,SAAAvE,GAEvC,GAAIA,IAAQU,EAAZ,CAOA,IAAM8D,EAAc/B,EAAezC,GAEzB,SAARA,GACwB,IAAvBwE,EAAYC,QAAmC,SAAnBD,EAAY,GAIxB,SAARxE,GAAqC,SAAnBwE,EAAY,IAGtB,UAARxE,GAAsC,SAAnBwE,EAAY,IAGvB,SAARxE,GAAyC,IAAvBwE,EAAYC,OAJvCL,EAAuBpE,IAAO,EAQ9BoE,EAAuBpE,IAAO,EAX9BoE,EAAuBpE,IAAO,OAX9BoE,EAAuB1D,IAAQ,KA4BnC,EAAK4B,SAAS,CAEZ0B,SAAUtD,EAEVE,oBAAqBwD,K,EAyBzB9C,SAAW,SAAAZ,GAET,EAAKyD,SAAS/E,UAAY,GAC1BsF,QAAQC,IAAI,UAAWjE,GAHN,MAI+B,EAAKkB,MAA7ChB,EAJS,EAITA,oBAAqB6B,EAJZ,EAIYA,eAEvB2B,EAAsB,eAAQxD,GAE9B4D,EAAc/B,EAAe/B,GAExB,SAATA,GACwB,IAAvB8D,EAAYC,QAAmC,SAAnBD,EAAY,GAIvB,SAAT9D,GAAsC,SAAnB8D,EAAY,IAGtB,UAAT9D,GAAuC,SAAnB8D,EAAY,IAGvB,SAAT9D,GAA0C,IAAvB8D,EAAYC,OAJxCL,EAAuB1D,IAAQ,EAQ/B0D,EAAuB1D,IAAQ,EAX/B0D,EAAuB1D,IAAQ,EAejC,EAAK4B,SAAS,CACZ0B,SAAU,GAEVpD,oBAAqBwD,K,EAKzBnC,OAAS,SAACvB,EAAMmB,GAEd,EAAKsC,SAAS/E,UAAY,GAC1BsF,QAAQC,IAAIjE,EAAMmB,GAHM,IAIhBjB,EAAwB,EAAKgB,MAA7BhB,oBAEFwD,EAAsB,eAAQxD,GAG9B4D,EAAc3C,EAET,SAATnB,GACwB,IAAvB8D,EAAYC,QAAmC,SAAnBD,EAAY,GAIvB,SAAT9D,GAAsC,SAAnB8D,EAAY,IAGtB,UAAT9D,GAAuC,SAAnB8D,EAAY,IAGvB,SAAT9D,GAA0C,IAAvB8D,EAAYC,OAJxCL,EAAuB1D,IAAQ,EAQ/B0D,EAAuB1D,IAAQ,EAX/B0D,EAAuB1D,IAAQ,EA8BjC,IAAMgC,EAAiB,eAClB,EAAKd,MAAMa,eADO,eAGpB/B,EAAOmB,IAGV6C,QAAQC,IAAI,6CAAWjC,GAnDC,IAqDhBkB,EAA4BlB,EAA5BkB,KAAMC,EAAsBnB,EAAtBmB,KAAM5E,EAAgByD,EAAhBzD,MAAO6E,EAASpB,EAAToB,KAGrBc,EAAU,GAGVC,EAAUjB,EAAK,GACrBc,QAAQC,IAAIE,GACZ,IAAIC,EAAY,OACI,IAAhBlB,EAAKa,SACPK,EAAwB,SAAZlB,EAAK,GAAgBA,EAAK,GAAKA,EAAK,IAElDgB,EAAQC,GAAWC,EAGnBF,EAAQf,KAAOA,EAAK,GACpBe,EAAQ3F,MAAQA,EAAM,GAGtB2F,EAAQd,KAAOA,EAAK/D,KAAK,KAEzB2E,QAAQC,IAAIC,GAGZ,EAAK9C,MAAMiD,SAASH,GAIpB,EAAKtC,SAAS,CACZ0B,SAAU,GAGVpD,oBAAqBwD,EAErB3B,eAAgBC,K,kEA5OlBV,KAAKmC,SAAWa,SAASC,KACzBjD,KAAKkD,mB,oKAMaC,KAAKC,MAAMC,aAAaC,QAAQ,cAA1CzD,E,EAAAA,M,SACU0D,IAAIC,IAAJ,+BAAgC3D,I,OAA5C4D,E,OAENzD,KAAKM,SAAS,CACZ2B,YAAawB,EAAIvD,KAAK+C,O,iJAsOJ,IAAD,EAKfjD,KAAKJ,MAHPoC,EAFiB,EAEjBA,SAFiB,IAGjBC,YAAeL,EAHE,EAGFA,KAAM8B,EAHJ,EAGIA,OAAQC,EAHZ,EAGYA,SAAU1G,EAHtB,EAGsBA,MACvCwD,EAJiB,EAIjBA,eAGF,GAAiB,SAAbuB,GAAoC,SAAbA,GAAoC,UAAbA,EAChD,OAAO,KAIT,IAAI9B,EAAO,GACPC,EAAO,EACPJ,EAAeU,EAAeuB,GAClC,OAAQA,GACN,IAAK,OAEH9B,EAAO,CAAC0B,EAAM8B,GACdvD,EAAO,EACP,MACF,IAAK,OACHD,EAAOyD,EACPxD,EAAO,EACP,MACF,IAAK,QACHD,EAAOjD,EACPkD,EAAO,EAMX,OACE,kBAAC,EAAD,CACEnC,IAAKgE,EACL1C,SAAUU,KAAKV,SACfW,OAAQD,KAAKC,OACbC,KAAMA,EACNC,KAAMA,EACNzB,KAAMsD,EACNjC,aAAcA,M,yCAqBA,IAAD,EAKbC,KAAKJ,MAHPoC,EAFe,EAEfA,SACAvB,EAHe,EAGfA,eAHe,IAIfwB,YAAef,EAJA,EAIAA,SAAUC,EAJV,EAIUA,SAAUC,EAJpB,EAIoBA,MAAOC,EAJ3B,EAI2BA,eAE5C,GAAiB,SAAbW,EACF,OAAO,KAGT,IAAM9B,EAAO,CACXgB,WACAC,WACAC,QACAC,kBAGItB,EAAeU,EAAeqB,KAEpC,OAAO,kBAAC,EAAD,CACL5B,KAAMA,EACNxB,KAAMsD,EACN/B,OAAQD,KAAKC,OACbX,SAAUU,KAAKV,SACfS,aAAcA,M,mCA0BJ,IAAD,OACHiC,EAAahC,KAAKJ,MAAlBoC,SAEF4B,EAAsB,SAAb5B,GAAoC,KAAbA,EAEtC,OACE,kBAAC,SAAD,CAAQ6B,KAAM,CAAEC,QAAS,GAAKC,GAAI,CAAED,QAASF,EAAS,EAAI,KACvD,SAAA9D,GAEC,OAAsB,IAAlBA,EAAMgE,QACD,KAIP,yBACE3G,MAAO2C,EACP1C,UAAWC,IAAOiE,KAClBpE,QAAS,kBAAM,EAAKoC,SAAS0C,W,+BA0B/B,IACApD,EAAwBoB,KAAKJ,MAA7BhB,oBAER,OACE,yBAAKxB,UAAWC,IAAOiB,MAkBpB0B,KAAKgE,aAEN,yBAAK5G,UAAWC,IAAOK,SAErB,kBAACiB,EAAD,CACEC,oBAAqBA,EAAqB1B,QAAS8C,KAAKkC,eAIzDlC,KAAKiE,qBAGLjE,KAAKkE,yB,GAlcoB3D,a,2BCmBrB4D,E,4MA/CbC,YAAcC,sB,EACd3G,QAAU2G,sB,EAGVC,aAAe,WAAO,IACZC,EAAW,EAAKzE,MAAhByE,OAEFC,EAAgB,EAAKJ,YAAYK,QACjCC,EAAY,EAAKhH,QAAQ+G,QAEfD,EAAcG,wBAAtBC,IACE,GAERF,EAAUG,UAAUC,IAAIzH,IAAO0H,OAC/BP,EAAcrH,MAAMoH,OAApB,UAAgCA,EAAhC,QAGAG,EAAUG,UAAUG,OAAO3H,IAAO0H,OAClCP,EAAcrH,MAAMoH,OAAS,Q,kEAM/BU,OAAOC,iBAAiB,SAAUlF,KAAKsE,gB,6CAIvCW,OAAOE,oBAAoB,SAAUnF,KAAKsE,gB,+BAI1C,OACE,6BAEE,yBAAKc,IAAKpF,KAAKoE,cAEf,yBAAKgB,IAAKpF,KAAKtC,SAAUsC,KAAKF,MAAMzB,e,GAvCvBkC,a,2BC2BA8E,E,4MASnBzF,MAAQ,CAEN0F,KAAM,GAENC,MAAO,EAEPC,WAAW,G,EAIbvE,MAAQ,G,EACRpB,MAAQ,G,EAER+C,QAAU,G,EA6DVG,SAAW,SAAAH,GAETqC,OAAOQ,SAAS,EAAG,GACnB,EAAK7C,QAAUA,EAKf,EAAK8C,mB,EAQPC,gBAAkB,YAA4B,IAAzB3H,EAAwB,EAAxBA,IAAKH,EAAmB,EAAnBA,MAAOV,EAAY,EAAZA,MAGzBG,EADW,EAAKsC,MAAd0F,KACWzH,GAGnB,OAAKP,GAQLoF,QAAQC,IAAIrF,GAGV,kBAACV,EAAA,EAAD,CACEoB,IAAKA,EACLd,QAAS,kBAAM,EAAK4C,MAAM8F,QAAQhF,KAAnB,kBAAmCtD,EAAMuI,aAExD1I,MAAOA,EACPN,IAAK0B,IAAWjB,EAAMwI,SACtBhJ,MAAOQ,EAAMR,MACbC,KAAMO,EAAMP,KACZC,KAAMM,EAAMN,KACZC,MAAOK,EAAML,SAlBb,yBAAKe,IAAKA,EAAKb,MAAOA,GACpB,uBAAGC,UAAWC,IAAO0I,Y,EAuB7BC,YAAc,YAAgB,IAAbnI,EAAY,EAAZA,MACf,QAAS,EAAK+B,MAAM0F,KAAKzH,I,EAe3BoI,aAAe,YAAgC,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAO5B,OAFAzD,QAAQC,IAAIuD,EAAYC,GAEjB,IAAIC,SAAQ,SAAAC,GACjB9C,IAAIC,IAAI,UAAW,CACjB8C,OAAO,aACLC,OAAQ,EAAK1G,OACV,EAAK+C,QAFJ,CAGJ4D,MAAON,EACPO,IAAKN,MAENO,MAAK,SAAAjD,GAEN,EAAKnD,SAAS,CACZgF,KAAK,GAAD,mBAAM,EAAK1F,MAAM0F,MAAjB,YAA0B7B,EAAIvD,KAAK+C,KAAKqC,SAI9Ce,W,sMA/I2BM,c,gBAAvB1F,E,EAAAA,MAAOpB,E,EAAAA,MACfG,KAAKiB,MAAQA,EACbjB,KAAKH,MAAQA,EAEbG,KAAK0F,kB,2QAgBL1F,KAAKM,SAAS,CACZkF,WAAW,IAGb,IAAMO,QAAQ,wBAAU,EAAG,MAAM,G,SAEfxC,IAAIC,IAAI,UAAW,CACnC8C,OAAO,aACLC,OAAQvG,KAAKH,OACVG,KAAK4C,QAFJ,CAGJ4D,MAAO,EACPC,IAAK,O,OALHhD,E,OASNf,QAAQC,IAAIc,G,EAEYA,EAAIvD,KAAK+C,KAAzBqC,E,EAAAA,KAAMC,E,EAAAA,MAEd,IAAMqB,OACNlE,QAAQC,IAAIc,GAIE,IAAV8B,GACF,IAAMsB,KAAN,6BAAkBtB,EAAlB,uBAA+B,EAAG,MAAM,GAE1CvF,KAAKM,SAAS,CACZgF,OACAC,QAEAC,WAAW,I,0IA+GD,IAAD,SACkBxF,KAAKJ,MAA1B2F,EADG,EACHA,MAAOC,EADJ,EACIA,UAGf,OAAc,IAAVD,GAAgBC,EAKlB,kBAAC,IAAD,CACEQ,YAAahG,KAAKgG,YAClBC,aAAcjG,KAAKiG,aACnBa,SAAUvB,IAET,gBAAGwB,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,cAAnB,OACC,kBAAC,IAAD,MACG,gBAAGzC,EAAH,EAAGA,OAAQ0C,EAAX,EAAWA,YAAaC,EAAxB,EAAwBA,UAAxB,OACC,kBAAC,IAAD,MACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,kBAAC,IAAD,CACEJ,eAAgBA,EAChB3B,IAAK4B,EACLI,YAAU,EACVD,MAAOA,EACP5C,OAAQA,EACRuC,SAAUvB,EACV8B,UAAW,IACXC,YAAa,EAAK3B,gBAClBsB,YAAaA,EACbC,UAAWA,aAxBlB,kBAAC9I,EAAA,EAAD,4G,+BAmCD,IAAD,OACW4B,KAAKJ,MAAf2F,MACR,OAAO,6BACL,uBAAMnI,UAAWC,IAAOkK,QACtB,uBAAGnK,UAAU,qBACXF,QAAS,kBAAM,EAAK4C,MAAM8F,QAAQ4B,IAAI,MAExC,kBAACC,EAAA,EAAD,CAAcC,SAAU1H,KAAKiB,MAAO7D,UAAWC,IAAOsK,gBAIxD,kBAAC,EAAD,CAAQpD,OAAQ,IACd,kBAAC,EAAD,CAAQxB,SAAU/C,KAAK+C,YAIzB,yBAAK3F,UAAWC,IAAOuK,YAAa5H,KAAK6H,mB,GApPRC,IAAMvH","file":"static/js/12.371a17bb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport styles from './index.module.css'\r\n\r\nfunction HouseItem({ src, title, desc, tags, price, onClick, style }) {\r\n  return (\r\n    <div className={styles.house} onClick={onClick} style={style}>\r\n      <div className={styles.imgWrap}>\r\n        <img className={styles.img} src={src} alt=\"\" />\r\n      </div>\r\n      <div className={styles.content}>\r\n        <h3 className={styles.title}>{title}</h3>\r\n        <div className={styles.desc}>{desc}</div>\r\n        <div>\r\n          {/* ['近地铁', '随时看房'] */}\r\n          {tags.map((tag, index) => {\r\n            const tagClass = 'tag' + (index + 1)\r\n            return (\r\n              <span\r\n                className={[styles.tag, styles[tagClass]].join(' ')}\r\n                key={tag}\r\n              >\r\n                {tag}\r\n              </span>\r\n            )\r\n          })}\r\n        </div>\r\n        <div className={styles.price}>\r\n          <span className={styles.priceNum}>{price}</span> 元/月\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nHouseItem.propTypes = {\r\n  src: PropTypes.string,\r\n  title: PropTypes.string,\r\n  desc: PropTypes.string,\r\n  tags: PropTypes.array.isRequired,\r\n  price: PropTypes.number,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default HouseItem\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"house\":\"HouseItem_house__3-EOM\",\"imgWrap\":\"HouseItem_imgWrap__3FWRL\",\"img\":\"HouseItem_img__2Bm7I\",\"content\":\"HouseItem_content__HAIK9\",\"title\":\"HouseItem_title__3c74j\",\"desc\":\"HouseItem_desc__3HE6n\",\"price\":\"HouseItem_price__369t8\",\"priceNum\":\"HouseItem_priceNum__3c2pl\",\"tag\":\"HouseItem_tag__2H0YY\",\"tag1\":\"HouseItem_tag1__2C-tJ\",\"tag2\":\"HouseItem_tag2__2mBKh\",\"tag3\":\"HouseItem_tag3__2EQAx\"};","import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { BASE_URL } from '../../utils/url'\r\nimport styles from './index.module.css'\r\n\r\nconst NoHouse = ({ children }) => (\r\n  <div className={styles.root}>\r\n    <img\r\n      className={styles.img}\r\n      src={BASE_URL + '/img/not-found.png'}\r\n      alt=\"暂无数据\"\r\n    />\r\n    <p className={styles.msg}>{children}</p>\r\n  </div>\r\n)\r\n\r\nNoHouse.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n\r\nexport default NoHouse\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"NoHouse_root__1sHrG\",\"img\":\"NoHouse_img__3ZnYx\",\"msg\":\"NoHouse_msg__3NqPw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FilterTitle_root__1Avx1\",\"dropdown\":\"FilterTitle_dropdown__2opAM\",\"selected\":\"FilterTitle_selected__3R0aE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FilterFooter_root__2Ku6X\",\"btn\":\"FilterFooter_btn__3SE8y\",\"cancel\":\"FilterFooter_cancel__3Anf9\",\"ok\":\"FilterFooter_ok__17cEO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FilterMore_root__3btjx\",\"mask\":\"FilterMore_mask__2BJQm\",\"tags\":\"FilterMore_tags__sMeDt\",\"tag\":\"FilterMore_tag__EtPqz\",\"tagActive\":\"FilterMore_tagActive__HPmTJ\",\"dl\":\"FilterMore_dl__37nZD\",\"dt\":\"FilterMore_dt__3JXyD\",\"dd\":\"FilterMore_dd__2GpSB\",\"footer\":\"FilterMore_footer__27WQY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Filter_root__2X4SE\",\"mask\":\"Filter_mask__2fx0X\",\"content\":\"Filter_content__8IdLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fixed\":\"Sticky_fixed__5i0KO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"HouseList_header__vpHHT\",\"searchHeader\":\"HouseList_searchHeader__2dJ9N\",\"houseItems\":\"HouseList_houseItems__2fKHT\",\"loading\":\"HouseList_loading__1xh0e\"};","import React from 'react'\r\n\r\nimport { Flex } from 'antd-mobile'\r\n\r\nimport styles from './index.module.css'\r\n\r\n// 条件筛选栏标题数组：\r\nconst titleList = [\r\n  { title: '区域', type: 'area' },\r\n  { title: '方式', type: 'mode' },\r\n  { title: '租金', type: 'price' },\r\n  { title: '筛选', type: 'more' }\r\n]\r\n\r\n/* \r\n  1 通过 props 接收，高亮状态对象 titleSelectedStatus。\r\n  2 遍历 titleList 数组，渲染标题列表。\r\n  3 判断高亮对象中当前标题是否高亮，如果是，就添加高亮类。\r\n\r\n  4 给标题项绑定单击事件，在事件中调用父组件传过来的方法 onClick。\r\n  5 将当前标题 type，通过 onClick 的参数，传递给父组件。\r\n  6 父组件中接收到当前 type，修改该标题的选中状态为true。\r\n*/\r\n\r\nexport default function FilterTitle({ titleSelectedStatus, onClick }) {\r\n  return (\r\n    <Flex align=\"center\" className={styles.root}>\r\n      {titleList.map(item => {\r\n        // item.type => 'area'\r\n        const isSelected = titleSelectedStatus[item.type]\r\n        return (\r\n          <Flex.Item key={item.type} onClick={() => onClick(item.type)}>\r\n            {/* 选中类名： selected */}\r\n            <span\r\n              className={[\r\n                styles.dropdown,\r\n                isSelected ? styles.selected : ''\r\n              ].join(' ')}\r\n            >\r\n              <span>{item.title}</span>\r\n              <i className=\"iconfont icon-arrow\" />\r\n            </span>\r\n          </Flex.Item>\r\n        )\r\n      })}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Flex } from 'antd-mobile'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport styles from './index.module.css'\r\n\r\nfunction FilterFooter({\r\n  cancelText = '取消',\r\n  okText = '确定',\r\n  onCancel,\r\n  onOk,\r\n  className\r\n}) {\r\n  return (\r\n    <Flex className={[styles.root, className || ''].join(' ')}>\r\n      {/* 取消按钮 */}\r\n      <span\r\n        className={[styles.btn, styles.cancel].join(' ')}\r\n        onClick={onCancel}\r\n      >\r\n        {cancelText}\r\n      </span>\r\n\r\n      {/* 确定按钮 */}\r\n      <span className={[styles.btn, styles.ok].join(' ')} onClick={onOk}>\r\n        {okText}\r\n      </span>\r\n    </Flex>\r\n  )\r\n}\r\n\r\n// props校验\r\nFilterFooter.propTypes = {\r\n  cancelText: PropTypes.string,\r\n  okText: PropTypes.string,\r\n  onCancel: PropTypes.func,\r\n  onOk: PropTypes.func,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default FilterFooter\r\n","import React, { Component } from 'react'\r\n\r\nimport { PickerView } from 'antd-mobile'\r\n\r\nimport FilterFooter from '../../../../components/FilterFooter'\r\n\r\n/* const province = [\r\n  {\r\n    label: '北京',\r\n    value: '01',\r\n    children: [\r\n      {\r\n        label: '东城区',\r\n        value: '01-1'\r\n      },\r\n      {\r\n        label: '西城区',\r\n        value: '01-2'\r\n      },\r\n      {\r\n        label: '崇文区',\r\n        value: '01-3'\r\n      },\r\n      {\r\n        label: '宣武区',\r\n        value: '01-4'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '浙江',\r\n    value: '02',\r\n    children: [\r\n      {\r\n        label: '杭州',\r\n        value: '02-1',\r\n        children: [\r\n          {\r\n            label: '西湖区',\r\n            value: '02-1-1'\r\n          },\r\n          {\r\n            label: '上城区',\r\n            value: '02-1-2'\r\n          },\r\n          {\r\n            label: '江干区',\r\n            value: '02-1-3'\r\n          },\r\n          {\r\n            label: '下城区',\r\n            value: '02-1-4'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        label: '宁波',\r\n        value: '02-2',\r\n        children: [\r\n          {\r\n            label: 'xx区',\r\n            value: '02-2-1'\r\n          },\r\n          {\r\n            label: 'yy区',\r\n            value: '02-2-2'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        label: '温州',\r\n        value: '02-3'\r\n      },\r\n      {\r\n        label: '嘉兴',\r\n        value: '02-4'\r\n      },\r\n      {\r\n        label: '湖州',\r\n        value: '02-5'\r\n      },\r\n      {\r\n        label: '绍兴',\r\n        value: '02-6'\r\n      }\r\n    ]\r\n  }\r\n] */\r\n\r\n/* \r\n  获取选中值：\r\n\r\n  1 在 FilterPicker 组件中，添加状态 value（用于获取 PickerView 组件的选中值）。\r\n  2 给 PickerView 组件添加配置项 onChange，通过参数获取到选中值，并更新状态 value。\r\n  3 在确定按钮的事件处理程序中，将 type 和 value 作为参数传递给父组件。\r\n*/\r\n\r\nexport default class FilterPicker extends Component {\r\n  state = {\r\n    value: this.props.defaultValue\r\n  }\r\n  // constructor(props) {\r\n  //   super(props)\r\n  //   console.log('FilterPicker 创建了')\r\n  //   this.state = {\r\n  //     value: this.props.defaultValue\r\n  //   }\r\n  // }\r\n  render() {\r\n    const { onCancel, onSave, data, cols, type } = this.props\r\n    const { value } = this.state\r\n    return (\r\n      <>\r\n       {/* \r\n          选择器组件： \r\n          注意：一定要设置组件 value 属性的值，为当前选中状态的值，否则，无法实现切换选中项\r\n        */}\r\n        <PickerView\r\n          data={data}\r\n          value={value}\r\n          cols={cols}\r\n          onChange={val => {\r\n            this.setState({\r\n              value: val\r\n            })\r\n          }} />\r\n\r\n        {/* 底部按钮 */}\r\n        <FilterFooter\r\n          onCancel={() => onCancel()}\r\n          onOk={() => onSave(type, value)}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport FilterFooter from '../../../../components/FilterFooter'\r\n\r\nimport styles from './index.module.css'\r\n\r\nexport default class FilterMore extends Component {\r\n  state = {\r\n    selectedValues: this.props.defaultValue\r\n  }\r\n\r\n  onTagClick(value) {\r\n    const { selectedValues } = this.state\r\n    // 创建新数组\r\n    const newSelectedValues = [...selectedValues]\r\n\r\n    if (newSelectedValues.indexOf(value) <= -1) {\r\n      // 没有当前项的值\r\n      newSelectedValues.push(value)\r\n    } else {\r\n      // 有\r\n      const index = newSelectedValues.findIndex(item => item === value)\r\n      newSelectedValues.splice(index, 1)\r\n    }\r\n\r\n    this.setState({\r\n      selectedValues: newSelectedValues\r\n    })\r\n  }\r\n  // 渲染标签\r\n  renderFilters(data) {\r\n    const { selectedValues } = this.state\r\n    // 高亮类名： styles.tagActive\r\n    return data.map(item => {\r\n      const isSelected = selectedValues.indexOf(item.value) > -1\r\n\r\n      return (\r\n        <span\r\n          key={item.value}\r\n          className={[styles.tag, isSelected ? styles.tagActive : ''].join(' ')}\r\n          onClick={() => this.onTagClick(item.value)}\r\n        >\r\n          {item.label}\r\n        </span>\r\n      )\r\n    })\r\n  }\r\n\r\n  // 取消按钮的事件处理程序\r\n  onCancel = () => {\r\n    this.setState({\r\n      selectedValues: []\r\n    })\r\n  }\r\n\r\n   // 确定按钮的事件处理程序\r\n   onOk = () => {\r\n    const { type, onSave } = this.props\r\n    // onSave 是父组件中的方法\r\n    onSave(type, this.state.selectedValues)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      data: { roomType, oriented, floor, characteristic },\r\n      onCancel,\r\n      type\r\n    } = this.props\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 遮罩层 */}\r\n        <div className={styles.mask} onClick={() => onCancel(type)} />\r\n\r\n        {/* 条件内容 */}\r\n\r\n        {/* 条件内容 */}\r\n        <div className={styles.tags}>\r\n          <dl className={styles.dl}>\r\n            <dt className={styles.dt}>户型</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(roomType)}</dd>\r\n\r\n            <dt className={styles.dt}>朝向</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(oriented)}</dd>\r\n\r\n            <dt className={styles.dt}>楼层</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(floor)}</dd>\r\n\r\n            <dt className={styles.dt}>房屋亮点</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(characteristic)}</dd>\r\n          </dl>\r\n        </div>\r\n\r\n        {/* \r\n          底部按钮\r\n\r\n          1 设置 FilterFooter 组件的取消按钮文字为：清除。\r\n          2 点击取消按钮时，清空所有选中项的值（selectedValues: []）。\r\n          3 点击确定按钮时，将当前选中项的值和 type，传递给 Filter 父组件。\r\n          4 在 Filter 组件中的 onSave 方法中，接收传递过来的选中值，更新状态 selectedValues。\r\n\r\n          说明：type 和 onSave 都由父组件通过 props 传递给该组件。\r\n        */}\r\n        <FilterFooter\r\n          className={styles.footer}\r\n          cancelText=\"清除\"\r\n          onCancel={this.onCancel}\r\n          onOk={this.onOk}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n// 导入 Spring 组件\r\nimport { Spring } from 'react-spring/renderprops'\r\n\r\nimport FilterTitle from '../FilterTitle'\r\nimport FilterPicker from '../FilterPicker'\r\nimport FilterMore from '../FilterMore'\r\n\r\n// 导入自定义的axios\r\nimport { API } from '../../../../utils/api'\r\n\r\nimport styles from './index.module.css'\r\n\r\n// 标题高亮状态\r\n// true 表示高亮； false 表示不高亮\r\nconst titleSelectedStatus = {\r\n  area: false,\r\n  mode: false,\r\n  price: false,\r\n  more: false\r\n}\r\n\r\n/* \r\n  控制 FilterPicker 组件的展示和隐藏：\r\n\r\n  1 在 Filter 组件中，提供控制对话框展示或隐藏的状态： openType（表示展示的对话框类型）。\r\n  2 在 render 中判断 openType 值为 area/mode/price 时，就展示 FilterPicker 组件，以及遮罩层。\r\n  3 在 onTitleClick 方法中，修改状态 openType 为当前 type，展示对话框。\r\n  4 在 Filter 组件中，提供 onCancel 方法，作为取消按钮和遮罩层的事件处理程序。\r\n  5 在 onCancel 方法中，修改状态 openType 为空，隐藏对话框。\r\n  6 将 onCancel 通过 props 传递给 FilterPicker 组件，在取消按钮的单击事件中调用该方法。\r\n  7 在 Filter 组件中，提供 onSave 方法，作为确定按钮的事件处理程序，逻辑同上。\r\n*/\r\n\r\n// FilterPicker 和 FilterMore 组件的选中值\r\nconst selectedValues = {\r\n  area: ['area', 'null'],\r\n  mode: ['null'],\r\n  price: ['null'],\r\n  more: []\r\n}\r\n\r\n/* \r\n  设置默认选中值：\r\n\r\n  1 在 Filter 组件中，提供选中值状态：selectedValues。\r\n  2 根据 openType 获取到当前类型的选中值（defaultValue），通过 props 传递给 FilterPicker 组件。\r\n  3 在 FilterPicker 组件中，将 defaultValue 设置为状态 value 的默认值。\r\n  4 在点击确定按钮后，在父组件中更新当前 type 对应的 selectedValues 状态值。\r\n*/\r\n\r\nexport default class Filter extends Component {\r\n  state = {\r\n    titleSelectedStatus,\r\n    // 控制 FilterPicker 或 FilterMore 组件的展示或隐藏\r\n    openType: '',\r\n    // 所有筛选条件数据\r\n    filtersData: {},\r\n    // 筛选条件的选中值\r\n    selectedValues\r\n  }\r\n\r\n  /* \r\n    展示条件筛选对话框后，页面滚动问题：\r\n    \r\n    1 在 componentDidMount 中，获取到 body，并存储在this中（ htmlBody ）。\r\n    2 在展示对话框的时候，给 body 添加类 body-fixed。\r\n    3 在关闭对话框（取消或确定）的时候，移除 body 中的类 body-fixed。\r\n  */\r\n  componentDidMount() {\r\n    // 获取到body\r\n    this.htmlBody = document.body\r\n    this.getFiltersData()\r\n  }\r\n\r\n  // 封装获取所有筛选条件的方法\r\n  async getFiltersData() {\r\n    // 获取当前定位城市id\r\n    const { value } = JSON.parse(localStorage.getItem('hkzf_city'))\r\n    const res = await API.get(`/houses/condition?id=${value}`)\r\n\r\n    this.setState({\r\n      filtersData: res.data.body\r\n    })\r\n  }\r\n\r\n  /* \r\n    // 高亮：\r\n    // selectedVal 表示当前 type 的选中值\r\n    // \r\n    // 如果 type 为 area，此时，selectedVal.length !== 2 || selectedVal[0] !== 'area'，就表示已经有选中值\r\n    // 如果 type 为 mode，此时，selectedVal[0] !== 'null'，就表示已经有选中值\r\n    // 如果 type 为 price，此时，selectedVal[0] !== 'null'，就表示已经有选中值\r\n    // 如果 type 为 more, ...\r\n\r\n    实现步骤：\r\n\r\n    1 在标题点击事件 onTitleClick 方法中，获取到两个状态：标题选中状态对象和筛选条件的选中值对象。\r\n    2 根据当前标题选中状态对象，获取到一个新的标题选中状态对象（newTitleSelectedStatus）。\r\n    3 使用 Object.keys() 方法，遍历标题选中状态对象。\r\n    4 先判断是否为当前标题，如果是，直接让该标题选中状态为 true（高亮）。\r\n\r\n    5 否则，分别判断每个标题的选中值是否与默认值相同。\r\n    6 如果不同，则设置该标题的选中状态为 true。\r\n    7 如果相同，则设置该标题的选中状态为 false。\r\n    8 更新状态 titleSelectedStatus 的值为：newTitleSelectedStatus。\r\n  */\r\n\r\n\r\n  // 点击标题菜单实现高亮\r\n  // 注意：this指向的问题！！！\r\n  // 说明：要实现完整的功能，需要后续的组件配合完成！\r\n  onTitleClick = type => {\r\n    // 给 body 添加样式\r\n    this.htmlBody.className = 'body-fixed'\r\n\r\n    const { titleSelectedStatus, selectedValues } = this.state\r\n\r\n    // 创建新的标题选中状态对象\r\n    const newTitleSelectedStatus = { ...titleSelectedStatus }\r\n    // 遍历标题选中状态对象\r\n    // Object.keys() => ['area', 'mode', 'price', 'more']\r\n    Object.keys(titleSelectedStatus).forEach(key => {\r\n      // key 表示数组中的每一项，此处，就是每个标题的 type 值。\r\n      if (key === type) {\r\n        // 当前标题\r\n        newTitleSelectedStatus[type] = true\r\n        return\r\n      }\r\n\r\n      // 其他标题：\r\n      const selectedVal = selectedValues[key]\r\n      if (\r\n        key === 'area' &&\r\n        (selectedVal.length !== 2 || selectedVal[0] !== 'area')\r\n      ) {\r\n        // 高亮\r\n        newTitleSelectedStatus[key] = true\r\n      } else if (key === 'mode' && selectedVal[0] !== 'null') {\r\n        // 高亮\r\n        newTitleSelectedStatus[key] = true\r\n      } else if (key === 'price' && selectedVal[0] !== 'null') {\r\n        // 高亮\r\n        newTitleSelectedStatus[key] = true\r\n      } else if (key === 'more' && selectedVal.length !== 0) {\r\n        // 更多选择项 FilterMore 组件\r\n        newTitleSelectedStatus[key] = true\r\n      } else {\r\n        newTitleSelectedStatus[key] = false\r\n      }\r\n    })\r\n\r\n    // console.log('newTitleSelectedStatus：', newTitleSelectedStatus)\r\n\r\n    this.setState({\r\n      // 展示对话框\r\n      openType: type,\r\n      // 使用新的标题选中状态对象来更新\r\n      titleSelectedStatus: newTitleSelectedStatus\r\n    })\r\n\r\n    /* this.setState(prevState => {\r\n      return {\r\n        titleSelectedStatus: {\r\n          // 获取当前对象中所有属性的值\r\n          ...prevState.titleSelectedStatus,\r\n          [type]: true\r\n        },\r\n        // 展示对话框\r\n        openType: type\r\n      }\r\n    }) */\r\n  }\r\n\r\n  /* \r\n      1 在 Filter 组件的 onTitleClick 方法中，添加 type 为 more 的判断条件。\r\n      2 当选中值数组长度不为 0 时，表示 FilterMore 组件中有选中项，此时，设置选中状态高亮。\r\n      3 在点击确定按钮时，根据参数 type 和 value，判断当前菜单是否高亮。\r\n      4 在关闭对话框时（onCancel），根据 type 和当前type的选中值，判断当前菜单是否高亮。\r\n        因为 onCancel 方法中，没有 type 参数，所以，就需要在调用 onCancel 方式时，来传递 type 参数。\r\n    */\r\n\r\n  // 取消（隐藏对话框）\r\n  onCancel = type => {\r\n    // 给 body 添加样式\r\n    this.htmlBody.className = ''\r\n    console.log('cancel:', type)\r\n    const { titleSelectedStatus, selectedValues } = this.state\r\n    // 创建新的标题选中状态对象\r\n    const newTitleSelectedStatus = { ...titleSelectedStatus }\r\n    // 菜单高亮逻辑处理\r\n    const selectedVal = selectedValues[type]\r\n    if (\r\n      type === 'area' &&\r\n      (selectedVal.length !== 2 || selectedVal[0] !== 'area')\r\n    ) {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'mode' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'price' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'more' && selectedVal.length !== 0) {\r\n      // 更多选择项 FilterMore 组件\r\n      newTitleSelectedStatus[type] = true\r\n    } else {\r\n      newTitleSelectedStatus[type] = false\r\n    }\r\n\r\n    // 隐藏对话框\r\n    this.setState({\r\n      openType: '',\r\n      // 更新菜单高亮状态数据\r\n      titleSelectedStatus: newTitleSelectedStatus\r\n    })\r\n  }\r\n\r\n  // 确定（隐藏对话框）\r\n  onSave = (type, value) => {\r\n    // 给 body 添加样式\r\n    this.htmlBody.className = ''\r\n    console.log(type, value)\r\n    const { titleSelectedStatus } = this.state\r\n    // 创建新的标题选中状态对象\r\n    const newTitleSelectedStatus = { ...titleSelectedStatus }\r\n\r\n    // 菜单高亮逻辑处理\r\n    const selectedVal = value\r\n    if (\r\n      type === 'area' &&\r\n      (selectedVal.length !== 2 || selectedVal[0] !== 'area')\r\n    ) {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'mode' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'price' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'more' && selectedVal.length !== 0) {\r\n      // 更多选择项 FilterMore 组件\r\n      newTitleSelectedStatus[type] = true\r\n    } else {\r\n      newTitleSelectedStatus[type] = false\r\n    }\r\n\r\n    /* \r\n      组装筛选条件：\r\n\r\n      1 在 Filter 组件的 onSave 方法中，根据最新 selectedValues 组装筛选条件数据 filters。\r\n      2 获取区域数据的参数名：area 或 subway（选中值数组的第一个元素）。\r\n      3 获取区域数据的值（以最后一个 value 为准）。\r\n      4 获取方式和租金的值（选中值的第一个元素）。\r\n      5 获取筛选（more）的值（将选中值数组转化为以逗号分隔的字符串）。\r\n\r\n      {\r\n        area: 'AREA|67fad918-f2f8-59df', // 或 subway: '...'\r\n        mode: 'true', // 或 'null'\r\n        price: 'PRICE|2000',\r\n        more: 'ORIEN|80795f1a-e32f-feb9,ROOM|d4a692e4-a177-37fd'\r\n      }\r\n    */\r\n    const newSelectedValues = {\r\n      ...this.state.selectedValues,\r\n      // 只更新当前 type 对应的选中值\r\n      [type]: value\r\n    }\r\n\r\n    console.log('最新的选中值：', newSelectedValues)\r\n\r\n    const { area, mode, price, more } = newSelectedValues\r\n\r\n    // 筛选条件数据\r\n    const filters = {}\r\n\r\n    // 区域\r\n    const areaKey = area[0]\r\n    console.log(areaKey)\r\n    let areaValue = 'null'\r\n    if (area.length === 3) {\r\n      areaValue = area[2] !== 'null' ? area[2] : area[1]\r\n    }\r\n    filters[areaKey] = areaValue\r\n\r\n    // 方式和租金\r\n    filters.mode = mode[0]\r\n    filters.price = price[0]\r\n\r\n    // 更多筛选条件 more\r\n    filters.more = more.join(',')\r\n\r\n    console.log(filters)\r\n\r\n    // 调用父组件中的方法，来将筛选数据传递给父组件\r\n    this.props.onFilter(filters)\r\n\r\n\r\n    // 隐藏对话框\r\n    this.setState({\r\n      openType: '',\r\n\r\n      // 更新菜单高亮状态数据\r\n      titleSelectedStatus: newTitleSelectedStatus,\r\n\r\n      selectedValues: newSelectedValues\r\n    })\r\n  }\r\n\r\n  // 渲染 FilterPicker 组件的方法\r\n  renderFilterPicker() {\r\n    const {\r\n      openType,\r\n      filtersData: { area, subway, rentType, price },\r\n      selectedValues\r\n    } = this.state\r\n\r\n    if (openType !== 'area' && openType !== 'mode' && openType !== 'price') {\r\n      return null\r\n    }\r\n\r\n    // 根据 openType 来拿到当前筛选条件数据\r\n    let data = []\r\n    let cols = 3\r\n    let defaultValue = selectedValues[openType]\r\n    switch (openType) {\r\n      case 'area':\r\n        // 获取到区域数据\r\n        data = [area, subway]\r\n        cols = 3\r\n        break\r\n      case 'mode':\r\n        data = rentType\r\n        cols = 1\r\n        break\r\n      case 'price':\r\n        data = price\r\n        cols = 1\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    return (\r\n      <FilterPicker\r\n        key={openType}\r\n        onCancel={this.onCancel}\r\n        onSave={this.onSave}\r\n        data={data}\r\n        cols={cols}\r\n        type={openType}\r\n        defaultValue={defaultValue}\r\n      />\r\n    )\r\n  }\r\n\r\n  /* \r\n    1 封装 renderFilterMore 方法，渲染 FilterMore 组件。\r\n    2 从 filtersData 中，获取数据（roomType, oriented, floor, characteristic），通过 props 传递给 FilterMore 组件。\r\n    3 FilterMore 组件中，通过 props 获取到数据，分别将数据传递给 renderFilters 方法。\r\n    4 在 renderFilters 方法中，通过参数接收数据，遍历数据，渲染标签。\r\n  */\r\n\r\n  /* \r\n    设置默认选中值：\r\n\r\n    1 在渲染 FilterMore 组件时，从 selectedValues 中，获取到当前选中值 more。\r\n    2 通过 props 将选中值传递给 FilterMore 组件。\r\n    3 在 FilterMore 组件中，将获取到的选中值，设置为子组件状态 selectedValues 的默认值。\r\n    4 给遮罩层绑定单击事件。\r\n    5 在单击事件中，调用父组件的方法 onCancel 关闭 FilterMore 组件。\r\n  */\r\n  renderFilterMore() {\r\n    const {\r\n      openType,\r\n      selectedValues,\r\n      filtersData: { roomType, oriented, floor, characteristic }\r\n    } = this.state\r\n    if (openType !== 'more') {\r\n      return null\r\n    }\r\n\r\n    const data = {\r\n      roomType,\r\n      oriented,\r\n      floor,\r\n      characteristic\r\n    }\r\n\r\n    const defaultValue = selectedValues.more\r\n\r\n    return <FilterMore\r\n      data={data}\r\n      type={openType}\r\n      onSave={this.onSave}\r\n      onCancel={this.onCancel}\r\n      defaultValue={defaultValue}\r\n    />\r\n  }\r\n\r\n  /* \r\n   react-spring 的基本使用：\r\n\r\n   1 安装：yarn add react-spring。\r\n   2 打开 Spring 组件文档（Spring 组件用来将数据从一个状态移动到另一个状态）。\r\n   3 导入 Spring 组件，使用 Spring 组件包裹要实现动画效果的遮罩层 div。\r\n   4 通过 render-props 模式，将参数 props（样式） 设置为遮罩层 div 的 style。\r\n   5 给 Spring 组件添加 from 属性，指定：组件第一次渲染时的动画状态。\r\n   6 给 Spring 组件添加 to 属性，指定：组件要更新的新动画状态。\r\n */\r\n\r\n  /* \r\n    实现遮罩层动画：\r\n\r\n    1 创建方法 renderMask 来渲染遮罩层 div。\r\n    2 修改渲染遮罩层的逻辑，保证 Spring 组件一直都被渲染（Spring 组件都被销毁了，就无法实现动画效果）。\r\n    3 修改 to 属性的值，在遮罩层隐藏时为 0，在遮罩层展示时为 1。\r\n    4 在 render-props 的函数内部，判断 props.opacity 是否等于 0。\r\n    5 如果等于 0，就返回 null（不渲染遮罩层），解决遮罩层遮挡页面导致顶部导航失效问题。\r\n    6 如果不等于 0，渲染遮罩层 div。\r\n  */\r\n  // 渲染遮罩层div\r\n  renderMask() {\r\n    const { openType } = this.state\r\n\r\n    const isHide = openType === 'more' || openType === ''\r\n\r\n    return (\r\n      <Spring from={{ opacity: 0 }} to={{ opacity: isHide ? 0 : 1 }}>\r\n        {props => {\r\n          // 说明遮罩层已经完成动画效果，隐藏了\r\n          if (props.opacity === 0) {\r\n            return null\r\n          }\r\n\r\n          return (\r\n            <div\r\n              style={props}\r\n              className={styles.mask}\r\n              onClick={() => this.onCancel(openType)}\r\n            />\r\n          )\r\n        }}\r\n      </Spring>\r\n    )\r\n\r\n    /* if (openType === 'more' || openType === '') {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <Spring from={{ opacity: 0 }} to={{ opacity: 1 }}>\r\n        {props => {\r\n          return (\r\n            <div\r\n              style={props}\r\n              className={styles.mask}\r\n              onClick={() => this.onCancel(openType)}\r\n            />\r\n          )\r\n        }}\r\n      </Spring>\r\n    ) */\r\n  }\r\n\r\n  render() {\r\n    const { titleSelectedStatus } = this.state\r\n\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 前三个菜单的遮罩层 */}\r\n        {/* {openType === 'area' || openType === 'mode' || openType === 'price' ? (\r\n          <Spring from={{ opacity: 0 }} to={{ opacity: 1 }}>\r\n            {props => {\r\n              // props => { opacity: 0 } 是从 0 到 1 的中间值\r\n              console.log(props)\r\n\r\n              return (\r\n                <div\r\n                  style={props}\r\n                  className={styles.mask}\r\n                  onClick={() => this.onCancel(openType)}\r\n                />\r\n              )\r\n            }}\r\n          </Spring>\r\n        ) : null} */}\r\n        {this.renderMask()}\r\n\r\n        <div className={styles.content}>\r\n          {/* 标题栏 */}\r\n          <FilterTitle\r\n            titleSelectedStatus={titleSelectedStatus} onClick={this.onTitleClick}\r\n          />\r\n\r\n          {/* 前三个菜单对应的内容： */}\r\n          {this.renderFilterPicker()}\r\n\r\n          {/* 最后一个菜单对应的内容： */}\r\n          {this.renderFilterMore()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component, createRef } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport styles from './index.module.css'\r\n\r\n// dom.getBoundingClientRect() 获取元素的大小及其相对于视口的位置。\r\n\r\n/* \r\n  条件筛选栏吸顶功能实现步骤：\r\n\r\n  1 封装 Sticky 组件，实现吸顶功能。\r\n  2 在 HouseList 页面中，导入 Sticky 组件。\r\n  3 使用 Sticky 组件包裹要实现吸顶功能的 Filter 组件。\r\n\r\n  4 在 Sticky 组件中，创建两个 ref 对象（placeholder、content），分别指向占位元素和内容元素。\r\n  5 组件中，监听浏览器的 scroll 事件（注意销毁事件）。\r\n  6 在 scroll 事件中，通过 getBoundingClientRect() 方法得到筛选栏占位元素当前位置（top）。\r\n  7 判断 top 是否小于 0（是否在可视区内）。\r\n  8 如果小于，就添加需要吸顶样式（fixed），同时设置占位元素高度（与条件筛选栏高度相同）。\r\n  9 否则，就移除吸顶样式，同时让占位元素高度为 0。\r\n*/\r\n\r\nclass Sticky extends Component {\r\n  // 创建ref对象\r\n  placeholder = createRef()\r\n  content = createRef()\r\n\r\n  // scroll 事件的事件处理程序\r\n  handleScroll = () => {\r\n    const { height } = this.props\r\n    // 获取DOM对象\r\n    const placeholderEl = this.placeholder.current\r\n    const contentEl = this.content.current\r\n\r\n    const { top } = placeholderEl.getBoundingClientRect()\r\n    if (top < 0) {\r\n      // 吸顶\r\n      contentEl.classList.add(styles.fixed)\r\n      placeholderEl.style.height = `${height}px`\r\n    } else {\r\n      // 取消吸顶\r\n      contentEl.classList.remove(styles.fixed)\r\n      placeholderEl.style.height = '0px'\r\n    }\r\n  }\r\n\r\n  // 监听 scroll 事件\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* 占位元素 */}\r\n        <div ref={this.placeholder} />\r\n        {/* 内容元素 */}\r\n        <div ref={this.content}>{this.props.children}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSticky.propTypes = {\r\n  height: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Sticky\r\n","import React from 'react'\r\n\r\nimport { Flex, Toast } from 'antd-mobile'\r\n\r\nimport {\r\n  List,\r\n  AutoSizer,\r\n  WindowScroller,\r\n  InfiniteLoader\r\n} from 'react-virtualized'\r\n\r\n\r\nimport { API } from '../../utils/api'\r\nimport { BASE_URL } from '../../utils/url'\r\nimport { getCurrentCity } from '../../utils'\r\n\r\n// 导入搜索导航栏组件\r\nimport SearchHeader from '../../components/SearchHeader'\r\nimport Filter from './components/Filter'\r\nimport HouseItem from '../../components/HouseItem'\r\n// 导入吸顶组件\r\nimport Sticky from '../../components/Sticky'\r\nimport NoHouse from '../../components/NoHouse'\r\n// 导入样式\r\nimport styles from './index.module.css'\r\n\r\n/* \r\n  切换城市显示房源：\r\n\r\n  原因：在组件外部的代码只会在项目加载时执行一次（刷新页面）。在切换路由时，不会重新重新执行。\r\n\r\n       组件内部的 componentDidMount() 会在组件展示时执行，进入页面一次，执行一次。\r\n\r\n  1 注释掉 获取当前定位城市信息 的代码。\r\n  2 导入 utils 中的 getCurrentCity 方法。\r\n  3 在 componentDidMount 中调用 getCurrentCity() 方法来获取当前定位城市信息。\r\n  4 将 label 和 value 保存到 this 中。\r\n  5 用到 label 和 value 的地方，使用 this.label 或 this.value 来访问。\r\n*/\r\n// console.log('HouseList')\r\n\r\n// 获取当前定位城市信息\r\n// const { label, value } = JSON.parse(localStorage.getItem('hkzf_city'))\r\n\r\n/*\r\n  1 在找房页面 SearchHeader 组件基础上，调整结构（添加返回icon等）。\r\n  2 给 SearchHeader 组件传递 className 属性，来调整组件样式，让其适应找房页面效果。\r\n*/\r\n\r\nexport default class HouseList extends React.Component {\r\n  /* \r\n  1 将筛选条件数据 filters 传递给父组件 HouseList。\r\n  2 HouseList 组件中，创建方法 onFilter，通过参数接收 filters 数据，并存储到 this 中。\r\n  3 创建方法 searchHouseList（用来获取房屋列表数据）。\r\n  4 根据接口，获取当前定位城市 id 参数。\r\n  5 将筛选条件数据与分页数据合并后，作为接口的参数，发送请求，获取房屋数据。\r\n*/\r\n\r\n  state = {\r\n    // 列表数据\r\n    list: [],\r\n    // 总条数\r\n    count: 0,\r\n    // 数据是否加载中\r\n    isLoading: false\r\n  }\r\n\r\n  // 初始化默认值\r\n  label = ''\r\n  value = ''\r\n  // 初始化实例属性\r\n  filters = {}\r\n\r\n  async componentDidMount() {\r\n    // console.log('HouseList -> did mount')\r\n    const { label, value } = await getCurrentCity()\r\n    this.label = label\r\n    this.value = value\r\n\r\n    this.searchHouseList()\r\n  }\r\n\r\n  /* \r\n    开启加载中提示和加载完成提示：\r\n\r\n    1 导入 Toast 组件。\r\n    2 在发送请求前使用 Toast.loading() 方法，开启 loading 效果。\r\n    3 请求完成时，调用 Toast.hide() 关闭 loading 效果。\r\n    4 请求完成时，调用 Toast.info() 提示查找到的房源数量。\r\n      说明：如果 count 为 0，就不再弹框提示，而是使用 找不到房源时的提示。\r\n  */\r\n\r\n  // 用来获取房屋列表数据\r\n  async searchHouseList() {\r\n    // 获取当前定位城市id\r\n    this.setState({\r\n      isLoading: true\r\n    })\r\n    // 开启loading\r\n    Toast.loading('加载中...', 0, null, false)\r\n    // const { value } = JSON.parse(localStorage.getItem('hkzf_city'))\r\n    const res = await API.get('/houses', {\r\n      params: {\r\n        cityId: this.value,\r\n        ...this.filters,\r\n        start: 1,\r\n        end: 20\r\n      }\r\n    })\r\n\r\n    console.log(res)\r\n\r\n    const { list, count } = res.data.body\r\n    // 关闭loading\r\n    Toast.hide()\r\n    console.log(res)\r\n\r\n    // 提示房源数量\r\n    // 解决了没有房源数据时，也弹窗提示的bug\r\n    if (count !== 0) {\r\n      Toast.info(`共找到 ${count} 套房源`, 2, null, false)\r\n    }\r\n    this.setState({\r\n      list,\r\n      count,\r\n      // 数据加载完成的状态\r\n      isLoading: false\r\n    })\r\n  }\r\n\r\n\r\n  // 接收 Filter 组件中的筛选条件数据\r\n  onFilter = filters => {\r\n    // 返回页面顶部\r\n    window.scrollTo(0, 0)\r\n    this.filters = filters\r\n\r\n    // console.log('HouseList：', this.filters)\r\n\r\n    // 调用获取房屋数据的方法\r\n    this.searchHouseList()\r\n  }\r\n\r\n  /* \r\n1 封装 HouseItem 组件，实现 Map 和 HouseList 页面中，房屋列表项的复用。\r\n2 使用 HouseItem 组件改造 Map 组件的房屋列表项。\r\n3 使用 react-virtualized 的 List 组件渲染房屋列表（参考 CityList 组件的使用）。\r\n*/\r\n  renderHouseList = ({ key, index, style }) => {\r\n    // 根据索引号来获取当前这一行的房屋数据\r\n    const { list } = this.state\r\n    const house = list[index]\r\n    // 判断 house 是否存在\r\n    // 如果不存在，就渲染 loading 元素占位\r\n    if (!house) {\r\n      return (\r\n        <div key={key} style={style}>\r\n          <p className={styles.loading} />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    console.log(house)\r\n\r\n    return (\r\n      <HouseItem\r\n        key={key}\r\n        onClick={() => this.props.history.push(`/detail/${house.houseCode}`)}\r\n        // 注意：该组件中应该接收 style，然后给组件元素设置样式！！！\r\n        style={style}\r\n        src={BASE_URL + house.houseImg}\r\n        title={house.title}\r\n        desc={house.desc}\r\n        tags={house.tags}\r\n        price={house.price}\r\n      />\r\n    )\r\n  }\r\n\r\n  // 判断列表中的每一行是否加载完成\r\n  isRowLoaded = ({ index }) => {\r\n    return !!this.state.list[index]\r\n  }\r\n\r\n  /* \r\n    加载更多房屋列表数据：\r\n\r\n    1 在 loadMoreRows 方法中，根据起始索引和结束索引，发送请求，获取更多房屋数据。\r\n    2 获取到最新的数据后，与当前 list 中的数据合并，再更新 state，并调用 Promise 的 resolve()。\r\n    3 在 renderHouseList 方法中，判断 house 是否存在。\r\n    4 不存在的时候，就渲染一个 loading 元素（防止拿不到数据时报错）。\r\n    5 存在的时候，再渲染 HouseItem 组件。\r\n  */\r\n\r\n  // 用来获取更多房屋列表数据\r\n  // 注意：该方法的返回值是一个 Promise 对象，并且，这个对象应该在数据加载完成时，来调用 resolve 让Promise对象的状态变为已完成。\r\n  loadMoreRows = ({ startIndex, stopIndex }) => {\r\n    // return fetch(`path/to/api?startIndex=${startIndex}&stopIndex=${stopIndex}`)\r\n    //   .then(response => {\r\n    //     // Store response data in list...\r\n    //   })\r\n    console.log(startIndex, stopIndex)\r\n\r\n    return new Promise(resolve => {\r\n      API.get('/houses', {\r\n        params: {\r\n          cityId: this.value,\r\n          ...this.filters,\r\n          start: startIndex,\r\n          end: stopIndex\r\n        }\r\n      }).then(res => {\r\n        // console.log('loadMoreRows：', res)\r\n        this.setState({\r\n          list: [...this.state.list, ...res.data.body.list]\r\n        })\r\n\r\n        // 数据加载完成时，调用 resolve 即可\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  /* \r\n   找不到房源时的提示 实现步骤：\r\n\r\n   1 在 state 中添加一个状态：isLoading 表示数据是否加载中。\r\n   2 在发送请求之前，设置 isLoading 的值为 true，表示即将要加载数据了。\r\n   3 在请求完成后，设置 isLoading 的值为 false，表示数据已经加载完成。\r\n   4 导入 NoHouse 组件。\r\n   5 封装 renderList 方法，来渲染房源列表。\r\n   6 在方法中，判断查询到的房源数量为0，并且已经 count === 0 && !isLoading 时，\r\n     提示： 没有找到相关的内容，请您换个搜索条件吧~\r\n   7 否则，展示房源列表\r\n */\r\n\r\n  // 渲染列表数据\r\n  renderList() {\r\n    const { count, isLoading } = this.state\r\n    // 关键点：在数据加载完成后，再进行 count 的判断\r\n    // 解决方式：如果数据加载中，则不展示 NoHouse 组件；而，但数据加载完成后，再展示 NoHouse 组件\r\n    if (count === 0 && !isLoading) {\r\n      return <NoHouse>没有找到房源，请您换个搜索条件吧~</NoHouse>\r\n    }\r\n\r\n    return (\r\n      <InfiniteLoader\r\n        isRowLoaded={this.isRowLoaded}\r\n        loadMoreRows={this.loadMoreRows}\r\n        rowCount={count}\r\n      >\r\n        {({ onRowsRendered, registerChild }) => (\r\n          <WindowScroller>\r\n            {({ height, isScrolling, scrollTop }) => (\r\n              <AutoSizer>\r\n                {({ width }) => (\r\n                  <List\r\n                    onRowsRendered={onRowsRendered}\r\n                    ref={registerChild}\r\n                    autoHeight // 设置高度为 WindowScroller 最终渲染的列表高度\r\n                    width={width} // 视口的宽度\r\n                    height={height} // 视口的高度\r\n                    rowCount={count} // List列表项的行数\r\n                    rowHeight={120} // 每一行的高度\r\n                    rowRenderer={this.renderHouseList} // 渲染列表项中的每一行\r\n                    isScrolling={isScrolling}\r\n                    scrollTop={scrollTop}\r\n                  />\r\n                )}\r\n              </AutoSizer>\r\n            )}\r\n          </WindowScroller>\r\n        )}\r\n      </InfiniteLoader>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { count } = this.state\r\n    return <div>\r\n      <Flex className={styles.header}>\r\n        <i className=\"iconfont icon-back\"\r\n          onClick={() => this.props.history.go(-1)}\r\n        />\r\n        <SearchHeader cityName={this.label} className={styles.searchHeader} />\r\n      </Flex>\r\n\r\n      {/* 条件筛选栏 */}\r\n      <Sticky height={40}>\r\n        <Filter onFilter={this.onFilter} />\r\n      </Sticky>\r\n\r\n      {/* 房屋列表 */}\r\n      <div className={styles.houseItems}>{this.renderList()}</div>\r\n    </div>\r\n  }\r\n}"],"sourceRoot":""}