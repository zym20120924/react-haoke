{"version":3,"sources":["pages/Index/index.js","pages/Home/index.js","components/AuthRoute/index.js","App.js","index.js","utils/auth.js","utils/url.js","utils/city.js","utils/index.js","utils/api.js"],"names":["Index","className","React","Component","News","lazy","HouseList","Profile","tabItems","title","icon","path","Home","state","selectedTab","props","location","pathname","prevProps","this","setState","map","item","Item","key","selectedIcon","selected","onPress","history","push","component","exact","unselectedTintColor","tintColor","barTintColor","noRenderContent","renderTabBarItem","AuthRoute","rest","render","isAuth","to","from","CityList","Map","HouseDetail","Login","Registe","Rent","RentAdd","RentSearch","App","fallback","ReactDOM","StrictMode","document","getElementById","getToken","localStorage","getItem","removeToken","removeItem","BASE_URL","process","getCity","JSON","parse","getCurrentCity","localCity","Promise","resolve","reject","window","BMap","LocalCity","get","res","a","axios","name","result","setItem","stringify","data","body","API","create","baseURL","interceptors","request","use","config","url","startsWith","headers","Authorization","response","status"],"mappings":"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","file":"static/js/main.1e87aa03.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// 导入样式文件\r\nimport './index.scss'\r\n\r\n\r\nexport default class Index extends React.Component { \r\n  \r\n      render() {\r\n        return (\r\n          <div className=\"index\">\r\n           \r\n            Hello World \r\n          </div>\r\n        );\r\n      }\r\n}","import React, { lazy } from 'react'\r\n// 2.1导入路由\r\nimport { Route } from 'react-router-dom'\r\n// 导入TabBar\r\nimport { TabBar } from 'antd-mobile';\r\n\r\n// 导入组件自己的样式文件\r\nimport './index.css'\r\n\r\n// 2.2 导入News组件\r\nimport Index from '../Index'\r\n// import News from '../News'\r\n// import HouseList from '../HouseList'\r\n// import Profile from '../Profile'\r\n\r\nconst News = lazy(() => import('../News'))\r\nconst HouseList = lazy(() => import('../HouseList'))\r\nconst Profile = lazy(() => import('../Profile'))\r\n\r\n/*\r\n    1. 在 pages 文件夹中创建 News/index.js组件 \r\n    2. 在 Home 组件中，添加一个Route 作为子路由（嵌套的路由）的出口 \r\n    3. 设置嵌套路由的path，格式以父路由 path 开头（父组件展示，子组件才会展示） \r\n*/\r\n\r\n\r\n\r\n\r\n// TarBar 数据\r\nconst tabItems = [ \r\n    { title: '首页', icon: 'icon-ind', path: '/home' },\r\n    { title: '找房', icon: 'icon-findHouse', path: '/home/list' },\r\n    { title: '资讯', icon: 'icon-infom', path: '/home/news' },\r\n    { title: '我的', icon: 'icon-my', path: '/home/profile' }\r\n ]\r\n\r\n/* \r\n 问题：点击首页导航菜单，导航到找房列表页面时，找房菜单没有高亮 \r\n 原因： 原来我们实现该功能的时候，只考虑了点击以及第一次加载 Home 组件的情况。但是，我们没有\r\n 考虑不重新加载 Home 组件时的路由切换，因为，这种情况下，我们的代码没有覆盖到\r\n 解决：\r\n    思路： 在路由切换时，也执行菜单高亮的逻辑代码\r\n    1 添加 componentDidUpdate 钩子函数\r\n    2 在钩子函数中判断路由地址是否切换 (因为路由的信息时通过 props 传递给组件的，所以，通过比较\r\n    更新前后的两个props)\r\n    3 在路由地址切换时，让菜单高亮\r\n*/\r\n \r\nexport default class Home extends React.Component {\r\n    state = {\r\n        // 默认选中的TabBar菜单项\r\n        selectedTab: this.props.location.pathname,\r\n    };\r\n\r\n    componentDidUpdate(prevProps,) {\r\n        // console.log('上一次的路由信息', prevProps)\r\n        // console.log('当前的路由信息', this.props)\r\n        if (prevProps.location.pathname !== this.props.location.pathname) {\r\n            // 此时，就说明路由发生切换了\r\n            this.setState({\r\n                selectedTab: this.props.location.pathname\r\n            })\r\n        }\r\n    }\r\n\r\n    // 渲染TabBar.Item\r\n    renderTabBarItem() {\r\n        return tabItems.map(item => \r\n            <TabBar.Item\r\n            title={item.title}\r\n            key={item.title}\r\n            icon={\r\n                <i className={`iconfont ${item.icon}`} />\r\n            }\r\n            selectedIcon={\r\n                <i className={`iconfont ${item.icon}`}/>\r\n            }\r\n            selected={this.state.selectedTab === item.path }\r\n            onPress={() => {\r\n                this.setState({\r\n                    selectedTab: item.path,\r\n                });\r\n                // 路由切换\r\n                this.props.history.push(item.path)\r\n            }}\r\n        >\r\n        </TabBar.Item>\r\n        )}\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"home\">\r\n            \r\n            {/* 2.3 渲染子路由 */}\r\n            <Route path=\"/home/news\" component={News}></Route>\r\n            <Route exact path=\"/home\" component={Index}></Route>\r\n            <Route path=\"/home/list\" component={HouseList}></Route>\r\n            <Route path=\"/home/profile\" component={Profile}></Route>\r\n            \r\n            {/* TarBar */}\r\n                <TabBar\r\n                    unselectedTintColor=\"#888\"\r\n                    tintColor=\"#21b97a\"\r\n                    barTintColor=\"white\"\r\n                    noRenderContent={true}\r\n                >\r\n                    {this.renderTabBarItem()}\r\n                </TabBar>\r\n            </div>\r\n        )}\r\n}","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { isAuth } from '../../utils'\r\n\r\n/* \r\n  封装 AuthRoute 鉴权路由组件：\r\n\r\n  1 在 components 目录中创建 AuthRoute/index.js 文件。\r\n  2 创建组件 AuthRoute 并导出。\r\n  3 在 AuthRoute 组件中返回 Route 组件（在 Route 基础上做了一层包装，用于实现自定义功能）。\r\n  4 给 Route 组件，添加 render 方法，指定该组件要渲染的内容（类似于 component 属性）。\r\n  5 在 render 方法中，调用 isAuth() 判断是否登录。\r\n  6 如果登录了，就渲染当前组件（通过参数 component 获取到要渲染的组件，需要重命名）。\r\n  7 如果没有登录，就重定向到登录页面，并且指定登录成功后要跳转到的页面路径。\r\n  8 将 AuthRoute 组件接收到的 props 原样传递给 Route 组件（保证与 Route 组件使用方式相同）。\r\n  9 使用 AuthRoute 组件配置路由规则，验证能否实现页面的登录访问控制。\r\n*/\r\n\r\n// <AuthRoute path=\"...\" component={...}></AuthRoute>\r\nconst AuthRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        const isLogin = isAuth()\r\n\r\n        if (isLogin) {\r\n          // 已登录\r\n          // 将 props 传递给组件，组件中才能获取到路由相关信息\r\n          return <Component {...props} />\r\n        } else {\r\n          // 未登录\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/login',\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AuthRoute\r\n","import React, { lazy, Suspense } from 'react';\n\n/*\n  1.安装：yarn add react-router-dom\n  2.导入路由组件：Router / Route / Link\n  3.在 pages 文件夹中创建 Home/index.js 和 CityList/index.js 两个组件(页面)\n  4.使用 Route 组件配置首页和城市选择页面\n*/\n\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom'\n\n// 导入首页和城市选择两个组件（页面）\nimport Home from './pages/Home'\n// import CityList from './pages/CityList'\n// import Map from './pages/Map'\n// 房源详情组件\n// import HouseDetail from './pages/HouseDetail'\n// 登录\n// import Login from './pages/Login'\n// import Registe from './pages/Registe'\n\n// 房源发布\n// import Rent from './pages/Rent'\n// import RentAdd from './pages/Rent/Add'\n// import RentSearch from './pages/Rent/Search'\n\n// 路由访问控制组件\nimport AuthRoute from './components/AuthRoute'\n// 导入要使用的组件\nimport { Button } from 'antd-mobile'\n\n// 使用动态组件的方式导入组件：\nconst CityList = lazy(() => import('./pages/CityList'))\nconst Map = lazy(() => import('./pages/Map'))\nconst HouseDetail = lazy(() => import('./pages/HouseDetail'))\nconst Login = lazy(() => import('./pages/Login'))\nconst Registe = lazy(() => import('./pages/Registe'))\nconst Rent = lazy(() => import('./pages/Rent'))\nconst RentAdd = lazy(() => import('./pages/Rent/Add'))\nconst RentSearch = lazy(() => import('./pages/Rent/Search'))\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div className=\"route-loading\">loading...</div>}>\n        <div className=\"App\">\n          {/* 默认路由匹配时，跳转到 /home 实现路由重定到首页 */}\n          <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\n\n          {/* 配置路由 */}\n          {/* Home组件是父路由的内容 */}\n          <Route path=\"/home\" component={Home}></Route>\n          <Route path=\"/citylist\" component={CityList}></Route>\n          <Route path=\"/map\" component={Map}></Route>\n\n          {/* 房源详情的路由规则： */}\n          <Route path=\"/detail/:id\" component={HouseDetail} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/registe\" component={Registe} />\n\n          {/* 配置登录后，才能访问的页面 */}\n          <AuthRoute exact path=\"/rent\" component={Rent} />\n          <AuthRoute path=\"/rent/add\" component={RentAdd} />\n          <AuthRoute path=\"/rent/search\" component={RentSearch} />\n        </div>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\n// 导入antd-mobile\n// import 'antd-mobile/dist/antd-mobile.css'\n\n// 导入 react-virtualized 组件的样式\nimport 'react-virtualized/styles.css'\n\n// 导入字体图标库的样式文件\nimport './assets/fonts/iconfont.css'\n// 注意：应该将 组件 的导入样式后面，从而避免样式覆盖的问题\nimport App from './App';\n// 注意：我们自己写的全局样式需要放在组件库样式后面导入，这样，样式才会生效！因为后面的样式会覆盖前面同名的样式\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","const TOKEN_NAME = 'hkzf_token'\r\n\r\n// 获取 token\r\nconst getToken = () => localStorage.getItem(TOKEN_NAME)\r\n\r\n// 设置 token\r\nconst setToken = value => localStorage.setItem(TOKEN_NAME, value)\r\n\r\n// 删除 token\r\nconst removeToken = () => localStorage.removeItem(TOKEN_NAME)\r\n\r\n// 是否登录（有权限）\r\nconst isAuth = () => !!getToken()\r\n\r\nexport { getToken, setToken, removeToken, isAuth }\r\n","// 获取环境变量中配置的URL地址\r\nexport const BASE_URL = process.env.REACT_APP_URL\r\n","const TOKEN_NAME = 'hkzf_city'\r\n\r\n// 获取当前定位城市\r\nconst getCity = () => JSON.parse(localStorage.getItem(TOKEN_NAME)) || {}\r\n\r\n// 设置当前定位城市\r\nconst setCity = value => localStorage.setItem(TOKEN_NAME, value)\r\n\r\nexport { getCity, setCity }\r\n","// 导入axios\r\nimport axios from 'axios'\r\n\r\n// 1 在 utils 目录中，新建 index.js，在该文件中封装\r\n// 2 创建并导出获取定位城市的函数 getCurrentCity\r\nexport const getCurrentCity = () => {\r\n  // 3 判断 localStorage 中是否有定位城市\r\n  const localCity = JSON.parse(localStorage.getItem('hkzf_city'))\r\n  if (!localCity) {\r\n    // 4 如果没有，就使用首页中获取定位城市的代码来获取，并且存储到本地存储中，然后返回该城市数据\r\n    return new Promise((resolve, reject) => {\r\n      const curCity = new window.BMap.LocalCity()\r\n      curCity.get(async res => {\r\n        try {\r\n          // console.log('当前城市信息：', res)\r\n          const result = await axios.get(\r\n            `http://118.190.160.53:8009/area/info?name=${res.name}`\r\n          )\r\n          // result.data.body => { label: '上海', value: '' }\r\n\r\n          // 存储到本地存储中\r\n          localStorage.setItem('hkzf_city', JSON.stringify(result.data.body))\r\n          // 返回该城市数据\r\n          // return result.data.body\r\n          resolve(result.data.body)\r\n        } catch (e) {\r\n          // 获取定位城市失败\r\n          reject(e)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  // 5 如果有，直接返回本地存储中的城市数据\r\n  // 注意：因为上面为了处理异步操作，使用了Promise，因此，为了该函数返回值的统一，此处，也应该使用Promise\r\n  // 因为此处的 Promise 不会失败，所以，此处，只要返回一个成功的Promise即可\r\n  return Promise.resolve(localCity)\r\n}\r\n\r\nexport { API } from './api'\r\nexport { BASE_URL } from './url'\r\n// 导出 auth 模块中的所有内容\r\nexport * from './auth'\r\n\r\nexport * from './city'","import axios from 'axios'\r\nimport { BASE_URL } from './url'\r\nimport { getToken, removeToken } from './auth'\r\n\r\n// 创建axios示例\r\nconst API = axios.create({\r\n  baseURL: BASE_URL\r\n})\r\n\r\n/* \r\n  1 在 api.js 中，添加请求拦截器。\r\n  2 获取到当前请求的接口路径（url）。\r\n  3 判断接口路径，是否是以 /user 开头，并且不是登录或注册接口（只给需要的接口添加请求头）。\r\n  4 如果是，就添加请求头 Authorization。\r\n  5 添加响应拦截器。\r\n  6 判断返回值中的状态码。\r\n  7 如果是 400，表示 token 超时或异常，直接移除 token。\r\n*/\r\n\r\n// 添加请求拦截器\r\nAPI.interceptors.request.use(config => {\r\n  // console.log(config, config.url)\r\n  const { url } = config\r\n  if (\r\n    url.startsWith('/user') &&\r\n    !url.startsWith('/user/login') &&\r\n    !url.startsWith('/user/registered')\r\n  ) {\r\n    // 添加请求头\r\n    config.headers.Authorization = getToken()\r\n  }\r\n  return config\r\n})\r\n\r\n// 添加响应拦截器\r\nAPI.interceptors.response.use(response => {\r\n  // console.log(response)\r\n  const { status } = response.data\r\n  if (status === 400) {\r\n    // 此时，说明 token 失效，直接移除 token 即可\r\n    removeToken()\r\n  }\r\n  return response\r\n})\r\n\r\nexport { API }\r\n"],"sourceRoot":""}