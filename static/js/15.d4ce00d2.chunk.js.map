{"version":3,"sources":["components/NavHeader/index.js","../node_modules/antd-mobile/lib/nav-bar/style/css.js","../node_modules/antd-mobile/lib/nav-bar/index.js","components/NavHeader/index.module.css","pages/CityList/index.js"],"names":["withRouter","children","history","onLeftClick","rightContent","className","styles","navBar","mode","icon","go","require","Object","defineProperty","exports","value","_extends3","_interopRequireDefault","_classCallCheck3","_createClass3","_possibleConstructorReturn3","_inherits3","_classnames2","React","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","_interopRequireWildcard","__rest","s","e","t","p","indexOf","getOwnPropertySymbols","i","length","NavBar","_React$Component","this","__proto__","getPrototypeOf","apply","arguments","_a","props","prefixCls","leftContent","restProps","createElement","role","onClick","Component","defaultProps","module","formatCityData","list","cityList","forEach","item","first","short","substr","push","cityIndex","keys","sort","HOUSE_CITY","CityList","state","activeIndex","rowRenderer","index","style","isScrolling","isVisible","letter","toUpperCase","formatCityIndex","map","changeCity","label","getRowHeight","onRowsRendered","startIndex","setState","cityListComponent","createRef","getCityList","current","measureAllRows","axios","get","res","console","log","data","body","hotRes","unshift","getCurrentCity","curCity","localStorage","setItem","JSON","stringify","info","scrollToRow","width","height","ref","rowCount","rowHeight","scrollToAlignment","renderCityIndex"],"mappings":"0LAwDeA,iBA/Bf,YAMI,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,YAEAC,GACC,EAFDC,UAEC,EADDD,cAIE,OACI,uBACAC,UAAWC,IAAOC,OAClBC,KAAK,QACLC,KAAM,uBAAGJ,UAAU,uBACnBF,YAAaA,GANI,kBAAMD,EAAQQ,IAAI,IAOnCN,aAAcA,GAEbH,O,iCCxCTU,EAAQ,IAERA,EAAQ,M,uDCFRC,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAGX,IAEIC,EAAYC,EAFAN,EAAQ,IAMpBO,EAAmBD,EAFAN,EAAQ,IAM3BQ,EAAgBF,EAFAN,EAAQ,IAMxBS,EAA8BH,EAFAN,EAAQ,IAMtCU,EAAaJ,EAFAN,EAAQ,IAMrBW,EAAeL,EAFDN,EAAQ,KAMtBY,EAEJ,SAAiCC,GAAO,GAAIA,GAAOA,EAAIC,WAAc,OAAOD,EAAc,IAAIE,EAAS,GAAI,GAAW,MAAPF,EAAe,IAAK,IAAIG,KAAOH,EAAWZ,OAAOgB,UAAUC,eAAeC,KAAKN,EAAKG,KAAMD,EAAOC,GAAOH,EAAIG,IAAmC,OAAzBD,EAAM,QAAcF,EAAYE,EAFzPK,CAFCpB,EAAQ,IAMrB,SAASM,EAAuBO,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAE,QAAWA,GAEzF,IAAIQ,EAA0C,SAAUC,EAAGC,GACvD,IAAIC,EAAI,GACR,IAAK,IAAIC,KAAKH,EACNrB,OAAOgB,UAAUC,eAAeC,KAAKG,EAAGG,IAAMF,EAAEG,QAAQD,GAAK,IAAGD,EAAEC,GAAKH,EAAEG,IAChF,GAAS,MAALH,GAAqD,oBAAjCrB,OAAO0B,sBAA2C,KAAIC,EAAI,EAAb,IAAgBH,EAAIxB,OAAO0B,sBAAsBL,GAAIM,EAAIH,EAAEI,OAAQD,IACjIL,EAAEG,QAAQD,EAAEG,IAAM,IAAGJ,EAAEC,EAAEG,IAAMN,EAAEG,EAAEG,KAC1C,OAAOJ,GAGRM,EAAS,SAAUC,GAGnB,SAASD,IAEL,OADA,EAAIvB,EAAgB,SAAayB,KAAMF,IAChC,EAAIrB,EAA2B,SAAauB,MAAOF,EAAOG,WAAahC,OAAOiC,eAAeJ,IAASK,MAAMH,KAAMI,YA4C7H,OAhDA,EAAI1B,EAAU,SAAaoB,EAAQC,IAOnC,EAAIvB,EAAa,SAAasB,EAAQ,CAAC,CACnCd,IAAK,SACLZ,MAAO,WACH,IAAIiC,EAAKL,KAAKM,MACVC,EAAYF,EAAGE,UACf7C,EAAY2C,EAAG3C,UACfJ,EAAW+C,EAAG/C,SACdO,EAAOwC,EAAGxC,KACVC,EAAOuC,EAAGvC,KACVN,EAAc6C,EAAG7C,YACjBgD,EAAcH,EAAGG,YACjB/C,EAAe4C,EAAG5C,aAClBgD,EAAYpB,EAAOgB,EAAI,CAAC,YAAa,YAAa,WAAY,OAAQ,OAAQ,cAAe,cAAe,iBAChH,OAAOzB,EAAM8B,cACT,OACA,EAAIrC,EAAS,SAAa,GAAIoC,EAAW,CAAE/C,WAAW,EAAIiB,EAAY,SAAajB,EAAW6C,EAAWA,EAAY,IAAM1C,KAC3He,EAAM8B,cACF,MACA,CAAEhD,UAAW6C,EAAY,QAASI,KAAM,SAAUC,QAASpD,GAC3DM,EAEAc,EAAM8B,cACF,OACA,CAAEhD,UAAW6C,EAAY,aAAc,cAAe,QACtDzC,GACA,KACJ0C,GAEJ5B,EAAM8B,cACF,MACA,CAAEhD,UAAW6C,EAAY,UACzBjD,GAEJsB,EAAM8B,cACF,MACA,CAAEhD,UAAW6C,EAAY,UACzB9C,QAKTqC,EAjDE,CAkDXlB,EAAMiC,WAER1C,EAAO,QAAc2B,EAErBA,EAAOgB,aAAe,CAClBP,UAAW,YACX1C,KAAM,OACNL,YAAa,cAEjBuD,EAAO5C,QAAUA,EAAO,S,oBCzGxB4C,EAAO5C,QAAU,CAAC,OAAS,4B,+PC+BrB6C,EAAiB,SAACC,GACpB,IAAMC,EAAW,GAIjBD,EAAKE,SAAQ,SAAAC,GAET,IAAMC,EAAQD,EAAKE,MAAMC,OAAO,EAAG,GAG/BL,EAASG,GAGTH,EAASG,GAAOG,KAAKJ,GAGrBF,EAASG,GAAS,CAACD,MAK3B,IAAMK,EAAYxD,OAAOyD,KAAKR,GAAUS,OAGxC,MAAO,CACHT,WACAO,cA0CFG,EAAa,CAAC,eAAM,eAAM,eAAM,gBAEjBC,E,kDACjB,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IAUVwB,MAAQ,CACJZ,SAAU,GACVO,UAAW,GAEXM,YAAa,GAfE,EAqFnBC,YAAa,YAMN,IALHhD,EAKE,EALFA,IACAiD,EAIE,EAJFA,MAGAC,GACE,EAHFC,YAGE,EAFFC,UAEE,EADFF,OACE,EAE8B,EAAKJ,MAA7BL,EAFN,EAEMA,UAAWP,EAFjB,EAEiBA,SACbmB,EAASZ,EAAUQ,GAIzB,OACI,yBAAKjD,IAAKA,EAAKkD,MAAOA,EAAOxE,UAAU,QACnC,yBAAKA,UAAU,SAnHP,SAAA2E,GACpB,OAAQA,GACN,IAAK,IACH,MAAO,2BACT,IAAK,MACH,MAAO,2BACT,QACE,OAAOA,EAAOC,eA4GkBC,CAAgBF,IACvCnB,EAASmB,GAAQG,KAAI,SAAApB,GAAI,OACtB,yBAAK1D,UAAU,OAAOsB,IAAKoC,EAAKhD,MAChCwC,QAAS,kBAAM,EAAK6B,WAAWrB,KAE1BA,EAAKsB,YAzGP,EAiHnBC,aAAe,YAAgB,IAAbV,EAAY,EAAZA,MAAY,EAGM,EAAKH,MACrC,OAzIa,GAED,GAmIc,EAGlBZ,SAHkB,EAGRO,UACuBQ,IAAQpC,QArHlC,EAgKrB+C,eAAiB,YAAqB,IAAlBC,EAAiB,EAAjBA,WAEd,EAAKf,MAAMC,cAAgBc,GAC7B,EAAKC,SAAS,CACZf,YAAac,KAlKb,EAAKf,MAAQ,CACTZ,SAAU,GACVO,UAAW,GAEXM,YAAa,GAGjB,EAAKgB,kBAAoBnE,IAAMoE,YAThB,E,0LAmBThD,KAAKiD,c,OAKVjD,KAAK+C,kBAAkBG,QAAQC,iB,oRAKdC,IAAMC,IAAI,gD,cAAtBC,E,OACNC,QAAQC,IAAI,uCAAUF,G,EAEUtC,EAAesC,EAAIG,KAAKC,MAAhDxC,E,EAAAA,SAAUO,E,EAAAA,U,SAQG2B,IAAMC,IAAI,uC,cAAzBM,E,OAENzC,EAAQ,IAAUyC,EAAOF,KAAKC,KAE9BjC,EAAUmC,QAAQ,O,UAIIC,c,QAAhBC,E,OAMN5C,EAAS,KAAO,CAAC4C,GACjBrC,EAAUmC,QAAQ,KAGlB5D,KAAK8C,SAAS,CACV5B,WACAO,c,2IAYoB,IAAjBiB,EAAgB,EAAhBA,MAAOtE,EAAS,EAATA,MACdwD,EAAWlC,QAAQgD,IAAU,GAE/BqB,aAAaC,QAAQ,YAAaC,KAAKC,UAAU,CAAExB,QAAOtE,WAC1D4B,KAAKM,MAAM/C,QAAQQ,IAAI,IAEvB,IAAMoG,KAAK,yDAAa,EAAG,MAAM,K,wCAwDhB,IAAD,SAEqBnE,KAAK8B,MAAhCL,EAFM,EAENA,UAAWM,EAFL,EAEKA,YACnB,OAAON,EAAUe,KAAI,SAACpB,EAAMa,GAAP,OACrB,wBAAIvE,UAAU,kBAAkBsB,IAAKoC,EAAMR,QAAS,WAE5C,EAAKmC,kBAAkBG,QAAQkB,YAAYnC,KAG/C,0BAAMvE,UAAWqE,IAAgBE,EAAQ,eAAiB,IAChD,QAATb,EAAiB,SAAMA,EAAKkB,qB,+BAyB3B,IAAD,OACL,OACI,yBAAK5E,UAAU,YAEX,kBAAC,IAAD,iCAKA,kBAAC,IAAD,MACK,gBAAG2G,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OACG,kBAAC,IAAD,CACIC,IAAK,EAAKxB,kBACVsB,MAAOA,EACPC,OAAQA,EACRE,SAAU,EAAK1C,MAAML,UAAU5B,OAC/B4E,UAAW,EAAK9B,aAChBX,YAAa,EAAKA,YAClBY,eAAgB,EAAKA,eACrB8B,kBAAkB,aAa9B,wBAAIhH,UAAU,cAAcsC,KAAK2E,wB,GA1MX/F,IAAMiC","file":"static/js/15.d4ce00d2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavBar } from 'antd-mobile'\r\n\r\n// 导入 withRouter 高阶组件\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n// 导入 props 校验的包\r\nimport PropTypes from 'prop-types'\r\n\r\n// 导入样式\r\n// import './index.scss'\r\nimport styles from './index.module.css'\r\n\r\n/* \r\n  注意：默认情况下，只有路由 Route 直接渲染的组件才能够获取到路由信息（比如：history.go()等）\r\n  如果需要在其他组件中获取到路由信息可以通过 withRouter 高阶组件来获取。\r\n\r\n  1 从 react-router-dom 中导入 withRouter 高阶组件\r\n  2 使用 withRouter 高阶组件包装 NavHeader 组件\r\n    目的：包装后，就可以在组件中获取到当前路由信息了\r\n  3 从 props 中解构出 history 对象\r\n  4 调用 history.go() 实现返回上一页功能\r\n  5 从 props 中解构出 onLeftClick 函数，实现自定义 < 按钮的点击事件\r\n*/\r\n\r\nfunction NavHeader({ \r\n  children, \r\n  history, \r\n  onLeftClick,\r\n  className,\r\n  rightContent\r\n}) {\r\n    // 默认点击行为\r\n  const defaultHandler = () => history.go(-1)\r\n    return (\r\n        <NavBar\r\n        className={styles.navBar}\r\n        mode=\"light\"\r\n        icon={<i className=\"iconfont icon-back\" />}\r\n        onLeftClick={onLeftClick || defaultHandler}\r\n        rightContent={rightContent}\r\n        >\r\n        {children}\r\n        </NavBar>\r\n  )\r\n}\r\n\r\n// 添加props校验\r\nNavHeader.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  onLeftClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  rightContent: PropTypes.array\r\n}\r\n\r\n// withRouter(NavHeader) 函数的返回值也是一个组件\r\nexport default withRouter(NavHeader)\r\n\r\n","'use strict';\n\nrequire('../../style/css');\n\nrequire('./index.css');","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n    var t = {};\n    for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    }if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n    }return t;\n};\n\nvar NavBar = function (_React$Component) {\n    (0, _inherits3['default'])(NavBar, _React$Component);\n\n    function NavBar() {\n        (0, _classCallCheck3['default'])(this, NavBar);\n        return (0, _possibleConstructorReturn3['default'])(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).apply(this, arguments));\n    }\n\n    (0, _createClass3['default'])(NavBar, [{\n        key: 'render',\n        value: function render() {\n            var _a = this.props,\n                prefixCls = _a.prefixCls,\n                className = _a.className,\n                children = _a.children,\n                mode = _a.mode,\n                icon = _a.icon,\n                onLeftClick = _a.onLeftClick,\n                leftContent = _a.leftContent,\n                rightContent = _a.rightContent,\n                restProps = __rest(_a, [\"prefixCls\", \"className\", \"children\", \"mode\", \"icon\", \"onLeftClick\", \"leftContent\", \"rightContent\"]);\n            return React.createElement(\n                'div',\n                (0, _extends3['default'])({}, restProps, { className: (0, _classnames2['default'])(className, prefixCls, prefixCls + '-' + mode) }),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-left', role: 'button', onClick: onLeftClick },\n                    icon ?\n                    // tslint:disable-next-line:jsx-no-multiline-js\n                    React.createElement(\n                        'span',\n                        { className: prefixCls + '-left-icon', 'aria-hidden': 'true' },\n                        icon\n                    ) : null,\n                    leftContent\n                ),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-title' },\n                    children\n                ),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-right' },\n                    rightContent\n                )\n            );\n        }\n    }]);\n    return NavBar;\n}(React.Component);\n\nexports['default'] = NavBar;\n\nNavBar.defaultProps = {\n    prefixCls: 'am-navbar',\n    mode: 'dark',\n    onLeftClick: function onLeftClick() {}\n};\nmodule.exports = exports['default'];","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavHeader_navBar__3G7Ta\"};","import React from 'react'\r\n\r\n// 导入axios \r\nimport axios from 'axios'\r\n\r\n// 1 导入 NavBar组件\r\nimport { Toast } from 'antd-mobile'\r\n\r\n// 导入 List 组件\r\nimport { List, AutoSizer } from 'react-virtualized'\r\n\r\n// 导入样式\r\nimport './index.scss'\r\n\r\n// 导入 CSSModules 的样式文件\r\n// import styles from './index.module.css'\r\n// console.log(styles)\r\n\r\n// 导入 utils 中获取当前城市定位的方法\r\nimport { getCurrentCity } from '../../utils'\r\n\r\n// 导入 NavHeader 组件\r\nimport NavHeader from '../../components/NavHeader'\r\n\r\n/* \r\n    // 渲染城市列表的数据格式为：\r\n    { a: [{}, {}], b: [{}, ...] }\r\n    // 渲染右侧索引的数据格式为：\r\n    ['a', 'b']\r\n*/\r\n// 数据格式化的方法\r\n// list: [{}, {}]\r\nconst formatCityData = (list) => {\r\n    const cityList = {}\r\n    // const cityIndex = []\r\n\r\n    // 1 遍历list数组\r\n    list.forEach(item => {\r\n        // 2 获取每一个城市的首字母\r\n        const first = item.short.substr(0, 1)\r\n        // console.log(first)\r\n        // 3 判断 cityList 中是否有该分类\r\n        if (cityList[first]) {\r\n            // 4 如果有，直接往该分类中push数据\r\n            // cityList[first] => [{}, {}]\r\n            cityList[first].push(item)\r\n        } else {\r\n            // 5 如果没有，就先创建一个数组，然后，把当前城市信息添加到数组中\r\n            cityList[first] = [item]\r\n        }\r\n    })\r\n\r\n    // 获取索引数据\r\n    const cityIndex = Object.keys(cityList).sort()\r\n\r\n\r\n    return {\r\n        cityList,\r\n        cityIndex\r\n    }\r\n}\r\n\r\n// 列表数据的数据源\r\n// const list = Array(100).fill('react-virtualized')\r\n\r\n// 渲染每一行数据的渲染函数\r\n// 函数的返回值就表示最终渲染在页面中的内容\r\n// function rowRenderer({\r\n//   key, // Unique key within array of rows\r\n//   index, // 索引号\r\n//   isScrolling, // 当前项是否正在滚动中\r\n//   isVisible, // 当前项在 List 中是可见的\r\n//   style // 注意：重点属性，一定要给每一个行数据添加该样式！作用：指定每一行的位置\r\n// }) {\r\n//   return (\r\n//     <div key={key} style={style}>\r\n//       1232 -{list[index]} {index} {isScrolling + ''}\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n\r\n// 索引（A、B等）的高度\r\nconst TITLE_HEIGHT = 36\r\n// 每个城市名称的高度\r\nconst NAME_HEIGHT = 50\r\n\r\n// 封装处理字母索引的方法\r\nconst formatCityIndex = letter => {\r\n    switch (letter) {\r\n      case '#':\r\n        return '当前定位'\r\n      case 'hot':\r\n        return '热门城市'\r\n      default:\r\n        return letter.toUpperCase()\r\n    }\r\n}\r\n\r\n// 有房源的城市\r\nconst HOUSE_CITY = ['北京', '上海', '广州', '深圳']\r\n\r\nexport default class CityList extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cityList: {},\r\n            cityIndex: [],\r\n            // 指定右侧字母索引列表高亮的索引号\r\n            activeIndex: 0\r\n        }\r\n        // 创建ref对象\r\n        this.cityListComponent = React.createRef()\r\n    }\r\n    state = {\r\n        cityList: {},\r\n        cityIndex: [],\r\n        // 指定右侧字母索引列表高亮的索引号\r\n        activeIndex: 0\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getCityList()\r\n\r\n        // 调用 measureAllRows，提前计算 List 中每一行的高度，实现 scrollToRow 的精确跳转\r\n        // 注意：调用这个方法的时候，需要保证 List 组件中已经有数据了！如果 List 组件中的数据为空，就会导致调用方法报错！\r\n        // 解决：只要保证这个方法是在 获取到数据之后 调用的即可。\r\n         this.cityListComponent.current.measureAllRows()\r\n    }\r\n\r\n    // 获取城市列表数据的方法\r\n    async getCityList() {\r\n        const res = await axios.get('http://118.190.160.53:8009/area/city?level=1')\r\n        console.log('城市列表数据', res);\r\n        // 解构\r\n        const { cityList, cityIndex } = formatCityData(res.data.body)\r\n        // console.log(cityList, cityIndex);\r\n\r\n        /* \r\n          1 获取热门城市数据\r\n          2 将数据添加到 cityList 中\r\n          3 将索引添加到 cityIndex 中\r\n        */\r\n        const hotRes = await axios.get('http://118.190.160.53:8009/area/hot')\r\n        // console.log('热门城市数据', hotRes)\r\n        cityList['hot'] = hotRes.data.body\r\n        // 3 将索引添加到 cityIndex 中\r\n        cityIndex.unshift('hot')\r\n\r\n\r\n        // 获取当前定位城市\r\n        const curCity = await getCurrentCity()\r\n\r\n        /* \r\n        1 将当前定位城市数据添加到 cityList 中\r\n        2 将当前定位城市的索引添加到 cityIndex 中\r\n        */\r\n        cityList['#'] = [curCity]\r\n        cityIndex.unshift('#')\r\n\r\n        // console.log(cityList, cityIndex, curCity)\r\n        this.setState({\r\n            cityList,\r\n            cityIndex\r\n        })\r\n\r\n    }\r\n\r\n    /* \r\n    1 给城市列表项绑定点击事件。\r\n    2 判断当前城市是否有房源数据（只有北/上/广/深四个城市有数据）。\r\n    3 如果有房源数据，则保存当前城市数据到本地缓存中，并返回上一页。\r\n    4 如果没有房源数据，则提示用户：该城市暂无房源数据，不执行任何操作。\r\n  */\r\n\r\n  changeCity({ label, value }) {\r\n    if (HOUSE_CITY.indexOf(label) > -1) {\r\n      // 有\r\n      localStorage.setItem('hkzf_city', JSON.stringify({ label, value }))\r\n      this.props.history.go(-1)\r\n    } else {\r\n      Toast.info('该城市暂无房源数据', 1, null, false)\r\n    }\r\n  }\r\n\r\n    // 渲染每一行数据的渲染函数\r\n    // 函数的返回值就表示最终渲染在页面中的内容\r\n    // List组件渲染每一行的方法：\r\n    rowRenderer= ({\r\n        key, // Unique key within array of rows\r\n        index, // 索引号\r\n        isScrolling, // 当前项是否正在滚动中\r\n        isVisible, // 当前项在 List 中是可见的\r\n        style // 注意：重点属性，一定要给每一个行数据添加该样式！作用：指定每一行的位置\r\n    }) => { \r\n        // 获取每一行的字母索引\r\n        const { cityIndex, cityList } = this.state\r\n        const letter = cityIndex[index]\r\n\r\n        // 获取指定字母索引下的城市列表数据\r\n        // console.log(cityList[letter]) \r\n        return (\r\n            <div key={key} style={style} className=\"city\">\r\n                <div className=\"title\">{formatCityIndex(letter)}</div>\r\n                {cityList[letter].map(item => (\r\n                    <div className=\"name\" key={item.value}\r\n                    onClick={() => this.changeCity(item)}\r\n                    >\r\n                        {item.label}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // 创建动态计算每一行高度的方法\r\n    getRowHeight = ({ index }) => {\r\n        // 索引标题高度 + 城市数量 * 城市名称的高度\r\n        // TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n        const { cityList, cityIndex } = this.state\r\n        return TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n    }\r\n\r\n     /* \r\n    1 给索引列表项绑定点击事件。\r\n    2 在点击事件中，通过 index 获取到当前项索引号。\r\n    3 调用 List 组件的 scrollToRow 方法，让 List 组件滚动到指定行。\r\n\r\n    3.1 在 constructor 中，调用 React.createRef() 创建 ref 对象。\r\n    3.2 将创建好的 ref 对象，添加为 List 组件的 ref 属性。\r\n    3.3 通过 ref 的 current 属性，获取到组件实例，再调用组件的 scrollToRow 方法。\r\n\r\n    4 设置 List 组件的 scrollToAlignment 配置项值为 start，保证被点击行出现在页面顶部。\r\n    5 对于点击索引无法正确定位的问题，调用 List 组件的 measureAllRows 方法，提前计算高度来解决。\r\n  */\r\n\r\n    // 封装渲染右侧索引列表的方法\r\n    renderCityIndex() {\r\n        // 获取到 cityIndex，并遍历其，实现渲染\r\n        const { cityIndex, activeIndex } = this.state\r\n        return cityIndex.map((item, index) => (\r\n        <li className=\"city-index-item\" key={item} onClick={() =>{\r\n                // console.log('当前索引号：', index)\r\n                this.cityListComponent.current.scrollToRow(index)\r\n            }\r\n        }>\r\n            <span className={activeIndex === index ? 'index-active' : ''}>\r\n            {item === 'hot' ? '热' : item.toUpperCase()}\r\n            </span>\r\n        </li>\r\n        ))\r\n    }\r\n\r\n    /* \r\n    1 给 List 组件添加 onRowsRendered 配置项，用于获取当前列表渲染的行信息。\r\n    2 通过参数 startIndex 获取到，起始行索引（也就是城市列表可视区最顶部一行的索引号）。\r\n    3 判断 startIndex 和 activeIndex 是否相同（判断的目的是为了提升性能，避免不必要的 state 更新）。\r\n    4 当 startIndex 和 activeIndex 不同时，更新状态 activeIndex 为 startIndex 的值。\r\n  */\r\n\r\n  \r\n\r\n  // 用于获取List组件中渲染行的信息\r\n  onRowsRendered = ({ startIndex }) => {\r\n    // console.log('startIndex：', startIndex)\r\n    if (this.state.activeIndex !== startIndex) {\r\n      this.setState({\r\n        activeIndex: startIndex\r\n      })\r\n    }\r\n  }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"citylist\">\r\n                {/* 顶部导航栏 */}\r\n                <NavHeader>\r\n                    城市选择\r\n                </NavHeader>\r\n\r\n                {/* 城市列表 */}\r\n                <AutoSizer>\r\n                    {({ width, height }) => (\r\n                        <List\r\n                            ref={this.cityListComponent}\r\n                            width={width}\r\n                            height={height}\r\n                            rowCount={this.state.cityIndex.length}\r\n                            rowHeight={this.getRowHeight}\r\n                            rowRenderer={this.rowRenderer}\r\n                            onRowsRendered={this.onRowsRendered}\r\n                            scrollToAlignment=\"start\"\r\n                        />\r\n                    )}\r\n                </AutoSizer>\r\n\r\n                {/* 右侧索引列表 */}\r\n                {/* \r\n                1 封装 renderCityIndex 方法，用来渲染城市索引列表。\r\n                2 在方法中，获取到索引数组 cityIndex ，遍历 cityIndex ，渲染索引列表。\r\n                3 将索引 hot 替换为 热。\r\n                4 在 state 中添加状态 activeIndex ，指定当前高亮的索引。\r\n                5 在遍历 cityIndex 时，添加当前字母索引是否高亮的判断条件。\r\n                */}\r\n                <ul className=\"city-index\">{this.renderCityIndex()}</ul>\r\n            </div>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}